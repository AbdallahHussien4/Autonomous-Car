

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Wed Sep 25 23:32:33 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    20                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    21                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    22                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    24  0000                     
    25                           ; Version 2.10
    26                           ; Generated 31/07/2019 GMT
    27                           ; 
    28                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC18F4620 Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     _SPBRG	set	4015
    60  0000                     _CCPR1L	set	4030
    61  0000                     _TMR2	set	4044
    62  0000                     _T2CONbits	set	4042
    63  0000                     _PR2	set	4043
    64  0000                     _CCP1CONbits	set	4029
    65  0000                     _RCREG	set	4014
    66  0000                     _LATB	set	3978
    67  0000                     _TRISB	set	3987
    68  0000                     _PORTDbits	set	3971
    69  0000                     _TRISD	set	3989
    70  0000                     _PORTD	set	3971
    71  0000                     _BRG16	set	32195
    72  0000                     _BRGH	set	32098
    73  0000                     _SYNC	set	32100
    74  0000                     _TXEN	set	32101
    75  0000                     _SPEN	set	32095
    76  0000                     _CREN	set	32092
    77  0000                     _RCIE	set	31981
    78  0000                     _TMR2ON	set	32338
    79  0000                     _TRISC2	set	31906
    80  0000                     _RCIF	set	31989
    81  0000                     _PEIE	set	32662
    82  0000                     _GIE	set	32663
    83                           
    84                           ; #config settings
    85  0000                     
    86                           	psect	cinit
    87  0002E6                     __pcinit:
    88                           	opt callstack 0
    89  0002E6                     start_initialization:
    90                           	opt callstack 0
    91  0002E6                     __initialization:
    92                           	opt callstack 0
    93                           
    94                           ; Clear objects allocated to COMRAM (6 bytes)
    95  0002E6  6A12               	clrf	(__pbssCOMRAM+5)& (0+255),c
    96  0002E8  6A11               	clrf	(__pbssCOMRAM+4)& (0+255),c
    97  0002EA  6A10               	clrf	(__pbssCOMRAM+3)& (0+255),c
    98  0002EC  6A0F               	clrf	(__pbssCOMRAM+2)& (0+255),c
    99  0002EE  6A0E               	clrf	(__pbssCOMRAM+1)& (0+255),c
   100  0002F0  6A0D               	clrf	__pbssCOMRAM& (0+255),c
   101  0002F2                     end_of_initialization:
   102                           	opt callstack 0
   103  0002F2                     __end_of__initialization:
   104                           	opt callstack 0
   105  0002F2  9013               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   106  0002F4  9213               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   107  0002F6  0100               	movlb	0
   108  0002F8  EF09  F000         	goto	_main	;jump to C main() function
   109                           
   110                           	psect	bssCOMRAM
   111  00000D                     __pbssCOMRAM:
   112                           	opt callstack 0
   113  00000D                     _i:
   114                           	opt callstack 0
   115  00000D                     	ds	1
   116  00000E                     _array:
   117                           	opt callstack 0
   118  00000E                     	ds	5
   119                           
   120                           	psect	cstackCOMRAM
   121  000001                     __pcstackCOMRAM:
   122                           	opt callstack 0
   123  000001                     ??_rec:
   124                           
   125                           ; 1 bytes @ 0x0
   126  000001                     	ds	2
   127  000003                     LCDWriteNibble@rs:
   128                           	opt callstack 0
   129  000003                     pwmreg@duty:
   130                           	opt callstack 0
   131                           
   132                           ; 2 bytes @ 0x2
   133  000003                     	ds	1
   134  000004                     LCDWriteNibble@ch:
   135                           	opt callstack 0
   136                           
   137                           ; 1 bytes @ 0x3
   138  000004                     	ds	1
   139  000005                     ??_LCDPutCmd:
   140  000005                     ??_pwmreg:
   141  000005                     ??_LCDPutChar:
   142                           
   143                           ; 1 bytes @ 0x4
   144  000005                     	ds	1
   145  000006                     LCDPutChar@ch:
   146                           	opt callstack 0
   147  000006                     LCDPutCmd@ch:
   148                           	opt callstack 0
   149                           
   150                           ; 1 bytes @ 0x5
   151  000006                     	ds	1
   152  000007                     ??_LCD_Initialize:
   153  000007                     LCDGoto@ln:
   154                           	opt callstack 0
   155  000007                     LCDPutStr@str:
   156                           	opt callstack 0
   157                           
   158                           ; 2 bytes @ 0x6
   159  000007                     	ds	1
   160  000008                     ??_LCDGoto:
   161                           
   162                           ; 1 bytes @ 0x7
   163  000008                     	ds	1
   164  000009                     LCDPutStr@i:
   165                           	opt callstack 0
   166                           
   167                           ; 1 bytes @ 0x8
   168  000009                     	ds	1
   169  00000A                     _LCDGoto$119:
   170                           	opt callstack 0
   171                           
   172                           ; 2 bytes @ 0x9
   173  00000A                     	ds	2
   174  00000C                     LCDGoto@pos:
   175                           	opt callstack 0
   176                           
   177                           ; 1 bytes @ 0xB
   178  00000C                     	ds	1
   179  00000D                     
   180                           ; 1 bytes @ 0xC
   181 ;;
   182 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   183 ;;
   184 ;; *************** function _main *****************
   185 ;; Defined at:
   186 ;;		line 16 in file "newmain.c"
   187 ;; Parameters:    Size  Location     Type
   188 ;;		None
   189 ;; Auto vars:     Size  Location     Type
   190 ;;		None
   191 ;; Return value:  Size  Location     Type
   192 ;;                  1    wreg      void 
   193 ;; Registers used:
   194 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   195 ;; Tracked objects:
   196 ;;		On entry : 0/0
   197 ;;		On exit  : 0/0
   198 ;;		Unchanged: 0/0
   199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   203 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   204 ;;Total ram usage:        0 bytes
   205 ;; Hardware stack levels required when called:    4
   206 ;; This function calls:
   207 ;;		_BRG9600
   208 ;;		_LCDGoto
   209 ;;		_LCDPutStr
   210 ;;		_LCD_Initialize
   211 ;;		_pwminit
   212 ;;		_pwmreg
   213 ;;		_recinit
   214 ;; This function is called by:
   215 ;;		Startup code after reset
   216 ;; This function uses a non-reentrant model
   217 ;;
   218                           
   219                           	psect	text0
   220  000012                     __ptext0:
   221                           	opt callstack 0
   222  000012                     _main:
   223                           	opt callstack 27
   224  000012                     
   225                           ;newmain.c: 18:      LCD_Initialize();
   226  000012  ECCA  F000         	call	_LCD_Initialize	;wreg free
   227  000016                     
   228                           ;newmain.c: 19:      GIE=1;
   229  000016  8EF2               	bsf	4082,7,c	;volatile
   230  000018                     
   231                           ;newmain.c: 20:      recinit();
   232  000018  EC86  F001         	call	_recinit	;wreg free
   233  00001C                     
   234                           ;newmain.c: 21:      BRG9600();
   235  00001C  EC7E  F001         	call	_BRG9600	;wreg free
   236  000020                     
   237                           ;newmain.c: 22:      PEIE=1;
   238  000020  8CF2               	bsf	4082,6,c	;volatile
   239  000022                     
   240                           ;newmain.c: 23:      TRISB=0;
   241  000022  0E00               	movlw	0
   242  000024  6E93               	movwf	147,c	;volatile
   243  000026                     
   244                           ;newmain.c: 24:      LATB=0x00;
   245  000026  0E00               	movlw	0
   246  000028  6E8A               	movwf	138,c	;volatile
   247  00002A                     
   248                           ;newmain.c: 25:      pwminit();
   249  00002A  EC64  F001         	call	_pwminit	;wreg free
   250  00002E                     
   251                           ;newmain.c: 26:      pwmreg(255);
   252  00002E  0E00               	movlw	0
   253  000030  6E04               	movwf	(pwmreg@duty+1)^0,c
   254  000032  6803               	setf	pwmreg@duty^0,c
   255  000034  EC21  F001         	call	_pwmreg	;wreg free
   256  000038                     
   257                           ;newmain.c: 27:      RCREG='\0';
   258  000038  0E00               	movlw	0
   259  00003A  6EAE               	movwf	174,c	;volatile
   260  00003C                     
   261                           ;newmain.c: 28:      RCIF=1;
   262  00003C  8A9E               	bsf	3998,5,c	;volatile
   263  00003E                     l1037:
   264                           
   265                           ;newmain.c: 30:      {;newmain.c: 32:          if(array[4]=='R')
   266  00003E  0E52               	movlw	82
   267  000040  1812               	xorwf	(_array+4)^0,w,c
   268  000042  A4D8               	btfss	status,2,c
   269  000044  EF26  F000         	goto	u171
   270  000048  EF28  F000         	goto	u170
   271  00004C                     u171:
   272  00004C  EF2C  F000         	goto	l1041
   273  000050                     u170:
   274  000050                     
   275                           ;newmain.c: 34:              LATB=8;
   276  000050  0E08               	movlw	8
   277  000052  6E8A               	movwf	138,c	;volatile
   278  000054  EF53  F000         	goto	l1053
   279  000058                     l1041:
   280  000058  0E4C               	movlw	76
   281  00005A  1812               	xorwf	(_array+4)^0,w,c
   282  00005C  A4D8               	btfss	status,2,c
   283  00005E  EF33  F000         	goto	u181
   284  000062  EF35  F000         	goto	u180
   285  000066                     u181:
   286  000066  EF39  F000         	goto	l1045
   287  00006A                     u180:
   288  00006A                     
   289                           ;newmain.c: 36:              LATB=2;
   290  00006A  0E02               	movlw	2
   291  00006C  6E8A               	movwf	138,c	;volatile
   292  00006E  EF53  F000         	goto	l1053
   293  000072                     l1045:
   294  000072  0E55               	movlw	85
   295  000074  1812               	xorwf	(_array+4)^0,w,c
   296  000076  A4D8               	btfss	status,2,c
   297  000078  EF40  F000         	goto	u191
   298  00007C  EF42  F000         	goto	u190
   299  000080                     u191:
   300  000080  EF46  F000         	goto	l1049
   301  000084                     u190:
   302  000084                     
   303                           ;newmain.c: 38:              LATB=1;
   304  000084  0E01               	movlw	1
   305  000086  6E8A               	movwf	138,c	;volatile
   306  000088  EF53  F000         	goto	l1053
   307  00008C                     l1049:
   308  00008C  0E44               	movlw	68
   309  00008E  1812               	xorwf	(_array+4)^0,w,c
   310  000090  A4D8               	btfss	status,2,c
   311  000092  EF4D  F000         	goto	u201
   312  000096  EF4F  F000         	goto	u200
   313  00009A                     u201:
   314  00009A  EF53  F000         	goto	l77
   315  00009E                     u200:
   316  00009E                     
   317                           ;newmain.c: 40:              LATB=4;
   318  00009E  0E04               	movlw	4
   319  0000A0  6E8A               	movwf	138,c	;volatile
   320  0000A2  EF53  F000         	goto	l1053
   321  0000A6                     l77:
   322  0000A6                     l1053:
   323                           
   324                           ;newmain.c: 41:          LCDGoto(0,0);
   325  0000A6  0E00               	movlw	0
   326  0000A8  6E07               	movwf	LCDGoto@ln^0,c
   327  0000AA  0E00               	movlw	0
   328  0000AC  EC62  F000         	call	_LCDGoto
   329  0000B0                     
   330                           ;newmain.c: 42:          LCDPutStr(array);
   331  0000B0  0E0E               	movlw	low _array
   332  0000B2  6E07               	movwf	LCDPutStr@str^0,c
   333  0000B4  0E00               	movlw	high _array
   334  0000B6  6E08               	movwf	(LCDPutStr@str+1)^0,c
   335  0000B8  ECE7  F000         	call	_LCDPutStr	;wreg free
   336  0000BC  EF1F  F000         	goto	l1037
   337  0000C0  EF07  F000         	goto	start
   338  0000C4                     __end_of_main:
   339                           	opt callstack 0
   340                           
   341 ;; *************** function _recinit *****************
   342 ;; Defined at:
   343 ;;		line 4 in file "Recieve.c"
   344 ;; Parameters:    Size  Location     Type
   345 ;;		None
   346 ;; Auto vars:     Size  Location     Type
   347 ;;		None
   348 ;; Return value:  Size  Location     Type
   349 ;;                  1    wreg      void 
   350 ;; Registers used:
   351 ;;		None
   352 ;; Tracked objects:
   353 ;;		On entry : 0/0
   354 ;;		On exit  : 0/0
   355 ;;		Unchanged: 0/0
   356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   360 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   361 ;;Total ram usage:        0 bytes
   362 ;; Hardware stack levels used:    1
   363 ;; Hardware stack levels required when called:    1
   364 ;; This function calls:
   365 ;;		Nothing
   366 ;; This function is called by:
   367 ;;		_main
   368 ;; This function uses a non-reentrant model
   369 ;;
   370                           
   371                           	psect	text1
   372  00030C                     __ptext1:
   373                           	opt callstack 0
   374  00030C                     _recinit:
   375                           	opt callstack 29
   376  00030C                     
   377                           ;Recieve.c: 6:     RCIE = 1;
   378  00030C  8A9D               	bsf	3997,5,c	;volatile
   379                           
   380                           ;Recieve.c: 7:     RCIF = 0;
   381  00030E  9A9E               	bcf	3998,5,c	;volatile
   382                           
   383                           ;Recieve.c: 8:     CREN = 1;
   384  000310  88AB               	bsf	4011,4,c	;volatile
   385  000312  0012               	return		;funcret
   386  000314                     __end_of_recinit:
   387                           	opt callstack 0
   388                           
   389 ;; *************** function _pwmreg *****************
   390 ;; Defined at:
   391 ;;		line 13 in file "PWM.c"
   392 ;; Parameters:    Size  Location     Type
   393 ;;  duty            2    2[COMRAM] int 
   394 ;; Auto vars:     Size  Location     Type
   395 ;;		None
   396 ;; Return value:  Size  Location     Type
   397 ;;                  1    wreg      void 
   398 ;; Registers used:
   399 ;;		wreg, status,2, status,0
   400 ;; Tracked objects:
   401 ;;		On entry : 0/0
   402 ;;		On exit  : 0/0
   403 ;;		Unchanged: 0/0
   404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   405 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   407 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   408 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   409 ;;Total ram usage:        4 bytes
   410 ;; Hardware stack levels used:    1
   411 ;; Hardware stack levels required when called:    1
   412 ;; This function calls:
   413 ;;		Nothing
   414 ;; This function is called by:
   415 ;;		_main
   416 ;; This function uses a non-reentrant model
   417 ;;
   418                           
   419                           	psect	text2
   420  000242                     __ptext2:
   421                           	opt callstack 0
   422  000242                     _pwmreg:
   423                           	opt callstack 29
   424  000242                     
   425                           ;PWM.c: 13: void pwmreg(int duty);PWM.c: 14: {;PWM.c: 15:     CCP1CONbits.DC1B=duty&0b11
      +                          ;
   426  000242  C003  F005         	movff	pwmreg@duty,??_pwmreg
   427  000246  0E03               	movlw	3
   428  000248  1605               	andwf	??_pwmreg^0,f,c
   429  00024A  3A05               	swapf	??_pwmreg^0,f,c
   430  00024C  50BD               	movf	189,w,c	;volatile
   431  00024E  1805               	xorwf	??_pwmreg^0,w,c
   432  000250  0BCF               	andlw	-49
   433  000252  1805               	xorwf	??_pwmreg^0,w,c
   434  000254  6EBD               	movwf	189,c	;volatile
   435                           
   436                           ;PWM.c: 16:     CCPR1L=duty>>2;
   437  000256  C003  F005         	movff	pwmreg@duty,??_pwmreg
   438  00025A  C004  F006         	movff	pwmreg@duty+1,??_pwmreg+1
   439  00025E  3406               	rlcf	(??_pwmreg+1)^0,w,c
   440  000260  3206               	rrcf	(??_pwmreg+1)^0,f,c
   441  000262  3205               	rrcf	??_pwmreg^0,f,c
   442  000264  3406               	rlcf	(??_pwmreg+1)^0,w,c
   443  000266  3206               	rrcf	(??_pwmreg+1)^0,f,c
   444  000268  3205               	rrcf	??_pwmreg^0,f,c
   445  00026A  5005               	movf	??_pwmreg^0,w,c
   446  00026C  6EBE               	movwf	190,c	;volatile
   447  00026E  0012               	return		;funcret
   448  000270                     __end_of_pwmreg:
   449                           	opt callstack 0
   450                           
   451 ;; *************** function _pwminit *****************
   452 ;; Defined at:
   453 ;;		line 4 in file "PWM.c"
   454 ;; Parameters:    Size  Location     Type
   455 ;;		None
   456 ;; Auto vars:     Size  Location     Type
   457 ;;		None
   458 ;; Return value:  Size  Location     Type
   459 ;;                  1    wreg      void 
   460 ;; Registers used:
   461 ;;		wreg, status,2
   462 ;; Tracked objects:
   463 ;;		On entry : 0/0
   464 ;;		On exit  : 0/0
   465 ;;		Unchanged: 0/0
   466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   470 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   471 ;;Total ram usage:        0 bytes
   472 ;; Hardware stack levels used:    1
   473 ;; Hardware stack levels required when called:    1
   474 ;; This function calls:
   475 ;;		Nothing
   476 ;; This function is called by:
   477 ;;		_main
   478 ;; This function uses a non-reentrant model
   479 ;;
   480                           
   481                           	psect	text3
   482  0002C8                     __ptext3:
   483                           	opt callstack 0
   484  0002C8                     _pwminit:
   485                           	opt callstack 29
   486  0002C8                     
   487                           ;PWM.c: 6:     CCP1CONbits.CCP1M=12;
   488  0002C8  50BD               	movf	189,w,c	;volatile
   489  0002CA  0BF0               	andlw	-16
   490  0002CC  090C               	iorlw	12
   491  0002CE  6EBD               	movwf	189,c	;volatile
   492  0002D0                     
   493                           ;PWM.c: 7:     TRISC2=0;
   494  0002D0  9494               	bcf	3988,2,c	;volatile
   495                           
   496                           ;PWM.c: 8:     PR2=124;
   497  0002D2  0E7C               	movlw	124
   498  0002D4  6ECB               	movwf	203,c	;volatile
   499                           
   500                           ;PWM.c: 9:     T2CONbits.T2CKPS=2;
   501  0002D6  50CA               	movf	202,w,c	;volatile
   502  0002D8  0BFC               	andlw	-4
   503  0002DA  0902               	iorlw	2
   504  0002DC  6ECA               	movwf	202,c	;volatile
   505                           
   506                           ;PWM.c: 10:     TMR2=0;
   507  0002DE  0E00               	movlw	0
   508  0002E0  6ECC               	movwf	204,c	;volatile
   509  0002E2                     
   510                           ;PWM.c: 11:     TMR2ON=1;
   511  0002E2  84CA               	bsf	4042,2,c	;volatile
   512  0002E4  0012               	return		;funcret
   513  0002E6                     __end_of_pwminit:
   514                           	opt callstack 0
   515                           
   516 ;; *************** function _LCD_Initialize *****************
   517 ;; Defined at:
   518 ;;		line 46 in file "lcd.c"
   519 ;; Parameters:    Size  Location     Type
   520 ;;		None
   521 ;; Auto vars:     Size  Location     Type
   522 ;;		None
   523 ;; Return value:  Size  Location     Type
   524 ;;                  1    wreg      void 
   525 ;; Registers used:
   526 ;;		wreg, status,2, status,0, cstack
   527 ;; Tracked objects:
   528 ;;		On entry : 0/0
   529 ;;		On exit  : 0/0
   530 ;;		Unchanged: 0/0
   531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   534 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   535 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   536 ;;Total ram usage:        1 bytes
   537 ;; Hardware stack levels used:    1
   538 ;; Hardware stack levels required when called:    3
   539 ;; This function calls:
   540 ;;		_LCDPutCmd
   541 ;; This function is called by:
   542 ;;		_main
   543 ;; This function uses a non-reentrant model
   544 ;;
   545                           
   546                           	psect	text4
   547  000194                     __ptext4:
   548                           	opt callstack 0
   549  000194                     _LCD_Initialize:
   550                           	opt callstack 27
   551  000194                     
   552                           ;lcd.c: 49:     PORTD = 0;
   553  000194  0E00               	movlw	0
   554  000196  6E83               	movwf	131,c	;volatile
   555                           
   556                           ;lcd.c: 51:     TRISD = 0x00;
   557  000198  0E00               	movlw	0
   558  00019A  6E95               	movwf	149,c	;volatile
   559  00019C                     
   560                           ;lcd.c: 54:     PORTDbits.RD7 = 1;
   561  00019C  8E83               	bsf	131,7,c	;volatile
   562  00019E                     
   563                           ;lcd.c: 57:     _delay((unsigned long)((15)*(8e6/4000.0)));
   564  00019E  0E27               	movlw	39
   565  0001A0  6E07               	movwf	??_LCD_Initialize^0,c
   566  0001A2  0EF5               	movlw	245
   567  0001A4                     u217:
   568  0001A4  2EE8               	decfsz	wreg,f,c
   569  0001A6  D7FE               	bra	u217
   570  0001A8  2E07               	decfsz	??_LCD_Initialize^0,f,c
   571  0001AA  D7FC               	bra	u217
   572  0001AC  F000               	nop	
   573  0001AE                     
   574                           ;lcd.c: 60:     LCDPutCmd(0x32);
   575  0001AE  0E32               	movlw	50
   576  0001B0  EC04  F001         	call	_LCDPutCmd
   577  0001B4                     
   578                           ;lcd.c: 63:     LCDPutCmd(0x28);
   579  0001B4  0E28               	movlw	40
   580  0001B6  EC04  F001         	call	_LCDPutCmd
   581  0001BA                     
   582                           ;lcd.c: 66:     LCDPutCmd(0x0C);
   583  0001BA  0E0C               	movlw	12
   584  0001BC  EC04  F001         	call	_LCDPutCmd
   585  0001C0                     
   586                           ;lcd.c: 68:     LCDPutCmd(0x01);
   587  0001C0  0E01               	movlw	1
   588  0001C2  EC04  F001         	call	_LCDPutCmd
   589  0001C6                     
   590                           ;lcd.c: 71:     LCDPutCmd(0x06);
   591  0001C6  0E06               	movlw	6
   592  0001C8  EC04  F001         	call	_LCDPutCmd
   593  0001CC  0012               	return		;funcret
   594  0001CE                     __end_of_LCD_Initialize:
   595                           	opt callstack 0
   596                           
   597 ;; *************** function _LCDPutStr *****************
   598 ;; Defined at:
   599 ;;		line 135 in file "lcd.c"
   600 ;; Parameters:    Size  Location     Type
   601 ;;  str             2    6[COMRAM] PTR const unsigned char 
   602 ;;		 -> array(5), 
   603 ;; Auto vars:     Size  Location     Type
   604 ;;  i               1    8[COMRAM] unsigned char 
   605 ;; Return value:  Size  Location     Type
   606 ;;                  1    wreg      void 
   607 ;; Registers used:
   608 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   609 ;; Tracked objects:
   610 ;;		On entry : 0/0
   611 ;;		On exit  : 0/0
   612 ;;		Unchanged: 0/0
   613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   614 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   615 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   617 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   618 ;;Total ram usage:        3 bytes
   619 ;; Hardware stack levels used:    1
   620 ;; Hardware stack levels required when called:    3
   621 ;; This function calls:
   622 ;;		_LCDPutChar
   623 ;; This function is called by:
   624 ;;		_main
   625 ;; This function uses a non-reentrant model
   626 ;;
   627                           
   628                           	psect	text5
   629  0001CE                     __ptext5:
   630                           	opt callstack 0
   631  0001CE                     _LCDPutStr:
   632                           	opt callstack 27
   633  0001CE                     
   634                           ;lcd.c: 135: void LCDPutStr(const char *str);lcd.c: 136: {;lcd.c: 137:     uint8_t i=0;
   635  0001CE  0E00               	movlw	0
   636  0001D0  6E09               	movwf	LCDPutStr@i^0,c
   637                           
   638                           ;lcd.c: 140:     while (str[i])
   639  0001D2  EFF5  F000         	goto	l997
   640  0001D6                     l993:
   641                           
   642                           ;lcd.c: 141:     {;lcd.c: 143:         LCDPutChar(str[i++]);
   643  0001D6  5009               	movf	LCDPutStr@i^0,w,c
   644  0001D8  2407               	addwf	LCDPutStr@str^0,w,c
   645  0001DA  6ED9               	movwf	fsr2l,c
   646  0001DC  0E00               	movlw	0
   647  0001DE  2008               	addwfc	(LCDPutStr@str+1)^0,w,c
   648  0001E0  6EDA               	movwf	fsr2h,c
   649  0001E2  50DF               	movf	indf2,w,c
   650  0001E4  EC38  F001         	call	_LCDPutChar
   651  0001E8  2A09               	incf	LCDPutStr@i^0,f,c
   652  0001EA                     l997:
   653                           
   654                           ;lcd.c: 140:     while (str[i])
   655  0001EA  5009               	movf	LCDPutStr@i^0,w,c
   656  0001EC  2407               	addwf	LCDPutStr@str^0,w,c
   657  0001EE  6ED9               	movwf	fsr2l,c
   658  0001F0  0E00               	movlw	0
   659  0001F2  2008               	addwfc	(LCDPutStr@str+1)^0,w,c
   660  0001F4  6EDA               	movwf	fsr2h,c
   661  0001F6  50DF               	movf	indf2,w,c
   662  0001F8  A4D8               	btfss	status,2,c
   663  0001FA  EF01  F001         	goto	u131
   664  0001FE  EF03  F001         	goto	u130
   665  000202                     u131:
   666  000202  EFEB  F000         	goto	l993
   667  000206                     u130:
   668  000206  0012               	return		;funcret
   669  000208                     __end_of_LCDPutStr:
   670                           	opt callstack 0
   671                           
   672 ;; *************** function _LCDPutChar *****************
   673 ;; Defined at:
   674 ;;		line 103 in file "lcd.c"
   675 ;; Parameters:    Size  Location     Type
   676 ;;  ch              1    wreg     unsigned char 
   677 ;; Auto vars:     Size  Location     Type
   678 ;;  ch              1    5[COMRAM] unsigned char 
   679 ;; Return value:  Size  Location     Type
   680 ;;                  1    wreg      void 
   681 ;; Registers used:
   682 ;;		wreg, status,2, status,0, cstack
   683 ;; Tracked objects:
   684 ;;		On entry : 0/0
   685 ;;		On exit  : 0/0
   686 ;;		Unchanged: 0/0
   687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   689 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   690 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   691 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   692 ;;Total ram usage:        2 bytes
   693 ;; Hardware stack levels used:    1
   694 ;; Hardware stack levels required when called:    2
   695 ;; This function calls:
   696 ;;		_LCDWriteNibble
   697 ;; This function is called by:
   698 ;;		_LCDPutStr
   699 ;; This function uses a non-reentrant model
   700 ;;
   701                           
   702                           	psect	text6
   703  000270                     __ptext6:
   704                           	opt callstack 0
   705  000270                     _LCDPutChar:
   706                           	opt callstack 27
   707                           
   708                           ;incstack = 0
   709                           ;LCDPutChar@ch stored from wreg
   710  000270  6E06               	movwf	LCDPutChar@ch^0,c
   711  000272                     
   712                           ;lcd.c: 103: void LCDPutChar(uint8_t ch);lcd.c: 104: {;lcd.c: 105:     _delay((unsigned 
      +                          long)((5)*(8e6/4000.0)));
   713  000272  0E0D               	movlw	13
   714  000274  6E05               	movwf	??_LCDPutChar^0,c
   715  000276  0EFC               	movlw	252
   716  000278                     u227:
   717  000278  2EE8               	decfsz	wreg,f,c
   718  00027A  D7FE               	bra	u227
   719  00027C  2E05               	decfsz	??_LCDPutChar^0,f,c
   720  00027E  D7FC               	bra	u227
   721  000280                     
   722                           ;lcd.c: 108:     LCDWriteNibble(ch,1);
   723  000280  0E01               	movlw	1
   724  000282  6E03               	movwf	LCDWriteNibble@rs^0,c
   725  000284  5006               	movf	LCDPutChar@ch^0,w,c
   726  000286  EC4E  F001         	call	_LCDWriteNibble
   727  00028A                     
   728                           ;lcd.c: 111:     ch = (ch << 4);
   729  00028A  3806               	swapf	LCDPutChar@ch^0,w,c
   730  00028C  0BF0               	andlw	240
   731  00028E  6E06               	movwf	LCDPutChar@ch^0,c
   732  000290                     
   733                           ;lcd.c: 114:     LCDWriteNibble(ch,1);
   734  000290  0E01               	movlw	1
   735  000292  6E03               	movwf	LCDWriteNibble@rs^0,c
   736  000294  5006               	movf	LCDPutChar@ch^0,w,c
   737  000296  EC4E  F001         	call	_LCDWriteNibble
   738  00029A  0012               	return		;funcret
   739  00029C                     __end_of_LCDPutChar:
   740                           	opt callstack 0
   741                           
   742 ;; *************** function _LCDGoto *****************
   743 ;; Defined at:
   744 ;;		line 148 in file "lcd.c"
   745 ;; Parameters:    Size  Location     Type
   746 ;;  pos             1    wreg     unsigned char 
   747 ;;  ln              1    6[COMRAM] unsigned char 
   748 ;; Auto vars:     Size  Location     Type
   749 ;;  pos             1   11[COMRAM] unsigned char 
   750 ;; Return value:  Size  Location     Type
   751 ;;                  1    wreg      void 
   752 ;; Registers used:
   753 ;;		wreg, status,2, status,0, cstack
   754 ;; Tracked objects:
   755 ;;		On entry : 0/0
   756 ;;		On exit  : 0/0
   757 ;;		Unchanged: 0/0
   758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   759 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   760 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   761 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   762 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   763 ;;Total ram usage:        6 bytes
   764 ;; Hardware stack levels used:    1
   765 ;; Hardware stack levels required when called:    3
   766 ;; This function calls:
   767 ;;		_LCDPutCmd
   768 ;; This function is called by:
   769 ;;		_main
   770 ;; This function uses a non-reentrant model
   771 ;;
   772                           
   773                           	psect	text7
   774  0000C4                     __ptext7:
   775                           	opt callstack 0
   776  0000C4                     _LCDGoto:
   777                           	opt callstack 27
   778                           
   779                           ;incstack = 0
   780                           ;LCDGoto@pos stored from wreg
   781  0000C4  6E0C               	movwf	LCDGoto@pos^0,c
   782  0000C6                     
   783                           ;lcd.c: 148: void LCDGoto(uint8_t pos,uint8_t ln);lcd.c: 149: {;lcd.c: 151:     if ((ln 
      +                          > (2 -1)) || (pos > (16 -1)))
   784  0000C6  0E02               	movlw	2
   785  0000C8  6007               	cpfslt	LCDGoto@ln^0,c
   786  0000CA  EF69  F000         	goto	u141
   787  0000CE  EF6B  F000         	goto	u140
   788  0000D2                     u141:
   789  0000D2  EF99  F000         	goto	l34
   790  0000D6                     u140:
   791  0000D6  0E0F               	movlw	15
   792  0000D8  640C               	cpfsgt	LCDGoto@pos^0,c
   793  0000DA  EF71  F000         	goto	u151
   794  0000DE  EF73  F000         	goto	u150
   795  0000E2                     u151:
   796  0000E2  EF75  F000         	goto	l1003
   797  0000E6                     u150:
   798  0000E6  EF99  F000         	goto	l34
   799  0000EA                     l1003:
   800                           
   801                           ;lcd.c: 158:     LCDPutCmd((ln == 1) ? (0xC0 | pos) : (0x80 | pos));
   802  0000EA  0407               	decf	LCDGoto@ln^0,w,c
   803  0000EC  B4D8               	btfsc	status,2,c
   804  0000EE  EF7B  F000         	goto	u161
   805  0000F2  EF7D  F000         	goto	u160
   806  0000F6                     u161:
   807  0000F6  EF87  F000         	goto	l1007
   808  0000FA                     u160:
   809  0000FA  0E80               	movlw	128
   810  0000FC  C00C  F008         	movff	LCDGoto@pos,??_LCDGoto
   811  000100  6A09               	clrf	(??_LCDGoto+1)^0,c
   812  000102  1008               	iorwf	??_LCDGoto^0,w,c
   813  000104  6E0A               	movwf	_LCDGoto$119^0,c
   814  000106  5009               	movf	(??_LCDGoto+1)^0,w,c
   815  000108  6E0B               	movwf	(_LCDGoto$119+1)^0,c
   816  00010A  EF8F  F000         	goto	l1009
   817  00010E                     l1007:
   818  00010E  0EC0               	movlw	192
   819  000110  C00C  F008         	movff	LCDGoto@pos,??_LCDGoto
   820  000114  6A09               	clrf	(??_LCDGoto+1)^0,c
   821  000116  1008               	iorwf	??_LCDGoto^0,w,c
   822  000118  6E0A               	movwf	_LCDGoto$119^0,c
   823  00011A  5009               	movf	(??_LCDGoto+1)^0,w,c
   824  00011C  6E0B               	movwf	(_LCDGoto$119+1)^0,c
   825  00011E                     l1009:
   826  00011E  500A               	movf	_LCDGoto$119^0,w,c
   827  000120  EC04  F001         	call	_LCDPutCmd
   828  000124                     
   829                           ;lcd.c: 161:     _delay((unsigned long)((5)*(8e6/4000.0)));
   830  000124  0E0D               	movlw	13
   831  000126  6E08               	movwf	??_LCDGoto^0,c
   832  000128  0EFC               	movlw	252
   833  00012A                     u237:
   834  00012A  2EE8               	decfsz	wreg,f,c
   835  00012C  D7FE               	bra	u237
   836  00012E  2E08               	decfsz	??_LCDGoto^0,f,c
   837  000130  D7FC               	bra	u237
   838  000132                     l34:
   839  000132  0012               	return		;funcret
   840  000134                     __end_of_LCDGoto:
   841                           	opt callstack 0
   842                           
   843 ;; *************** function _LCDPutCmd *****************
   844 ;; Defined at:
   845 ;;		line 118 in file "lcd.c"
   846 ;; Parameters:    Size  Location     Type
   847 ;;  ch              1    wreg     unsigned char 
   848 ;; Auto vars:     Size  Location     Type
   849 ;;  ch              1    5[COMRAM] unsigned char 
   850 ;; Return value:  Size  Location     Type
   851 ;;                  1    wreg      void 
   852 ;; Registers used:
   853 ;;		wreg, status,2, status,0, cstack
   854 ;; Tracked objects:
   855 ;;		On entry : 0/0
   856 ;;		On exit  : 0/0
   857 ;;		Unchanged: 0/0
   858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   860 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   861 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   862 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   863 ;;Total ram usage:        2 bytes
   864 ;; Hardware stack levels used:    1
   865 ;; Hardware stack levels required when called:    2
   866 ;; This function calls:
   867 ;;		_LCDWriteNibble
   868 ;; This function is called by:
   869 ;;		_LCD_Initialize
   870 ;;		_LCDGoto
   871 ;; This function uses a non-reentrant model
   872 ;;
   873                           
   874                           	psect	text8
   875  000208                     __ptext8:
   876                           	opt callstack 0
   877  000208                     _LCDPutCmd:
   878                           	opt callstack 27
   879                           
   880                           ;incstack = 0
   881                           ;LCDPutCmd@ch stored from wreg
   882  000208  6E06               	movwf	LCDPutCmd@ch^0,c
   883  00020A                     
   884                           ;lcd.c: 118: void LCDPutCmd(uint8_t ch);lcd.c: 119: {;lcd.c: 120:     _delay((unsigned l
      +                          ong)((5)*(8e6/4000.0)));
   885  00020A  0E0D               	movlw	13
   886  00020C  6E05               	movwf	??_LCDPutCmd^0,c
   887  00020E  0EFC               	movlw	252
   888  000210                     u247:
   889  000210  2EE8               	decfsz	wreg,f,c
   890  000212  D7FE               	bra	u247
   891  000214  2E05               	decfsz	??_LCDPutCmd^0,f,c
   892  000216  D7FC               	bra	u247
   893  000218                     
   894                           ;lcd.c: 123:     LCDWriteNibble(ch,0);
   895  000218  0E00               	movlw	0
   896  00021A  6E03               	movwf	LCDWriteNibble@rs^0,c
   897  00021C  5006               	movf	LCDPutCmd@ch^0,w,c
   898  00021E  EC4E  F001         	call	_LCDWriteNibble
   899  000222                     
   900                           ;lcd.c: 126:     ch = (ch << 4);
   901  000222  3806               	swapf	LCDPutCmd@ch^0,w,c
   902  000224  0BF0               	andlw	240
   903  000226  6E06               	movwf	LCDPutCmd@ch^0,c
   904  000228                     
   905                           ;lcd.c: 128:     _delay((unsigned long)((1)*(8e6/4000.0)));
   906  000228  0E03               	movlw	3
   907  00022A  6E05               	movwf	??_LCDPutCmd^0,c
   908  00022C  0E98               	movlw	152
   909  00022E                     u257:
   910  00022E  2EE8               	decfsz	wreg,f,c
   911  000230  D7FE               	bra	u257
   912  000232  2E05               	decfsz	??_LCDPutCmd^0,f,c
   913  000234  D7FC               	bra	u257
   914  000236                     
   915                           ;lcd.c: 131:     LCDWriteNibble(ch,0);
   916  000236  0E00               	movlw	0
   917  000238  6E03               	movwf	LCDWriteNibble@rs^0,c
   918  00023A  5006               	movf	LCDPutCmd@ch^0,w,c
   919  00023C  EC4E  F001         	call	_LCDWriteNibble
   920  000240  0012               	return		;funcret
   921  000242                     __end_of_LCDPutCmd:
   922                           	opt callstack 0
   923                           
   924 ;; *************** function _LCDWriteNibble *****************
   925 ;; Defined at:
   926 ;;		line 76 in file "lcd.c"
   927 ;; Parameters:    Size  Location     Type
   928 ;;  ch              1    wreg     unsigned char 
   929 ;;  rs              1    2[COMRAM] unsigned char 
   930 ;; Auto vars:     Size  Location     Type
   931 ;;  ch              1    3[COMRAM] unsigned char 
   932 ;; Return value:  Size  Location     Type
   933 ;;                  1    wreg      void 
   934 ;; Registers used:
   935 ;;		wreg, status,2, status,0
   936 ;; Tracked objects:
   937 ;;		On entry : 0/0
   938 ;;		On exit  : 0/0
   939 ;;		Unchanged: 0/0
   940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   941 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   942 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   944 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   945 ;;Total ram usage:        2 bytes
   946 ;; Hardware stack levels used:    1
   947 ;; Hardware stack levels required when called:    1
   948 ;; This function calls:
   949 ;;		Nothing
   950 ;; This function is called by:
   951 ;;		_LCDPutChar
   952 ;;		_LCDPutCmd
   953 ;; This function uses a non-reentrant model
   954 ;;
   955                           
   956                           	psect	text9
   957  00029C                     __ptext9:
   958                           	opt callstack 0
   959  00029C                     _LCDWriteNibble:
   960                           	opt callstack 27
   961                           
   962                           ;incstack = 0
   963                           ;LCDWriteNibble@ch stored from wreg
   964  00029C  6E04               	movwf	LCDWriteNibble@ch^0,c
   965  00029E                     
   966                           ;lcd.c: 76: void LCDWriteNibble(uint8_t ch,uint8_t rs);lcd.c: 77: {;lcd.c: 79:     ch = 
      +                          (ch >> 4);
   967  00029E  3804               	swapf	LCDWriteNibble@ch^0,w,c
   968  0002A0  0B0F               	andlw	15
   969  0002A2  6E04               	movwf	LCDWriteNibble@ch^0,c
   970                           
   971                           ;lcd.c: 82:     ch = (ch & 0x0F);
   972  0002A4  5004               	movf	LCDWriteNibble@ch^0,w,c
   973  0002A6  0B0F               	andlw	15
   974  0002A8  6E04               	movwf	LCDWriteNibble@ch^0,c
   975                           
   976                           ;lcd.c: 85:     PORTD = (PORTD & 0xF0);
   977  0002AA  5083               	movf	131,w,c	;volatile
   978  0002AC  0BF0               	andlw	240
   979  0002AE  6E83               	movwf	131,c	;volatile
   980                           
   981                           ;lcd.c: 88:     PORTD = (PORTD | ch);
   982  0002B0  5083               	movf	131,w,c	;volatile
   983  0002B2  1004               	iorwf	LCDWriteNibble@ch^0,w,c
   984  0002B4  6E83               	movwf	131,c	;volatile
   985  0002B6                     
   986                           ;lcd.c: 91:     PORTDbits.RD4 = rs;
   987  0002B6  B003               	btfsc	LCDWriteNibble@rs^0,0,c
   988  0002B8  D002               	bra	u125
   989  0002BA  9883               	bcf	131,4,c	;volatile
   990  0002BC  D001               	bra	u126
   991  0002BE                     u125:
   992  0002BE  8883               	bsf	131,4,c	;volatile
   993  0002C0                     u126:
   994  0002C0                     
   995                           ;lcd.c: 94:     PORTDbits.RD5 = 0;
   996  0002C0  9A83               	bcf	131,5,c	;volatile
   997  0002C2                     
   998                           ;lcd.c: 97:     PORTDbits.RD6 = 1;
   999  0002C2  8C83               	bsf	131,6,c	;volatile
  1000  0002C4                     
  1001                           ;lcd.c: 100:     PORTDbits.RD6 = 0;
  1002  0002C4  9C83               	bcf	131,6,c	;volatile
  1003  0002C6  0012               	return		;funcret
  1004  0002C8                     __end_of_LCDWriteNibble:
  1005                           	opt callstack 0
  1006                           
  1007 ;; *************** function _BRG9600 *****************
  1008 ;; Defined at:
  1009 ;;		line 10 in file "Recieve.c"
  1010 ;; Parameters:    Size  Location     Type
  1011 ;;		None
  1012 ;; Auto vars:     Size  Location     Type
  1013 ;;		None
  1014 ;; Return value:  Size  Location     Type
  1015 ;;                  1    wreg      void 
  1016 ;; Registers used:
  1017 ;;		wreg, status,2
  1018 ;; Tracked objects:
  1019 ;;		On entry : 0/0
  1020 ;;		On exit  : 0/0
  1021 ;;		Unchanged: 0/0
  1022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1026 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1027 ;;Total ram usage:        0 bytes
  1028 ;; Hardware stack levels used:    1
  1029 ;; Hardware stack levels required when called:    1
  1030 ;; This function calls:
  1031 ;;		Nothing
  1032 ;; This function is called by:
  1033 ;;		_main
  1034 ;; This function uses a non-reentrant model
  1035 ;;
  1036                           
  1037                           	psect	text10
  1038  0002FC                     __ptext10:
  1039                           	opt callstack 0
  1040  0002FC                     _BRG9600:
  1041                           	opt callstack 29
  1042  0002FC                     
  1043                           ;Recieve.c: 11:     SPEN = 1;
  1044  0002FC  8EAB               	bsf	4011,7,c	;volatile
  1045                           
  1046                           ;Recieve.c: 12:     TXEN = 1;
  1047  0002FE  8AAC               	bsf	4012,5,c	;volatile
  1048                           
  1049                           ;Recieve.c: 13:     SYNC = 0;
  1050  000300  98AC               	bcf	4012,4,c	;volatile
  1051                           
  1052                           ;Recieve.c: 14:     BRGH = 0;
  1053  000302  94AC               	bcf	4012,2,c	;volatile
  1054                           
  1055                           ;Recieve.c: 15:     BRG16 = 0;
  1056  000304  96B8               	bcf	4024,3,c	;volatile
  1057  000306                     
  1058                           ;Recieve.c: 16:     SPBRG = 12;
  1059  000306  0E0C               	movlw	12
  1060  000308  6EAF               	movwf	175,c	;volatile
  1061  00030A  0012               	return		;funcret
  1062  00030C                     __end_of_BRG9600:
  1063                           	opt callstack 0
  1064                           
  1065 ;; *************** function _rec *****************
  1066 ;; Defined at:
  1067 ;;		line 48 in file "newmain.c"
  1068 ;; Parameters:    Size  Location     Type
  1069 ;;		None
  1070 ;; Auto vars:     Size  Location     Type
  1071 ;;		None
  1072 ;; Return value:  Size  Location     Type
  1073 ;;                  1    wreg      void 
  1074 ;; Registers used:
  1075 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1076 ;; Tracked objects:
  1077 ;;		On entry : 0/0
  1078 ;;		On exit  : 0/0
  1079 ;;		Unchanged: 0/0
  1080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1083 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1084 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1085 ;;Total ram usage:        2 bytes
  1086 ;; Hardware stack levels used:    1
  1087 ;; This function calls:
  1088 ;;		Nothing
  1089 ;; This function is called by:
  1090 ;;		Interrupt level 2
  1091 ;; This function uses a non-reentrant model
  1092 ;;
  1093                           
  1094                           	psect	intcode
  1095  000008                     __pintcode:
  1096                           	opt callstack 0
  1097  000008                     _rec:
  1098                           	opt callstack 27
  1099                           
  1100                           ;incstack = 0
  1101  000008  8213               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  1102  00000A  ED9A  F000         	call	int_func,f	;refresh shadow registers
  1103                           
  1104                           	psect	intcode_body
  1105  000134                     __pintcode_body:
  1106                           	opt callstack 27
  1107  000134                     int_func:
  1108                           	opt callstack 27
  1109  000134  0006               	pop		; remove dummy address from shadow register refresh
  1110  000136  CFD9 F001          	movff	fsr2l,??_rec
  1111  00013A  CFDA F002          	movff	fsr2h,??_rec+1
  1112  00013E                     
  1113                           ;newmain.c: 50:     if(RCIF)
  1114  00013E  AA9E               	btfss	3998,5,c	;volatile
  1115  000140  EFA4  F000         	goto	i2u10_41
  1116  000144  EFA6  F000         	goto	i2u10_40
  1117  000148                     i2u10_41:
  1118  000148  EFC4  F000         	goto	i2l91
  1119  00014C                     i2u10_40:
  1120  00014C                     
  1121                           ;newmain.c: 51:     {;newmain.c: 52:         if(RCREG=='\0')
  1122  00014C  50AE               	movf	174,w,c	;volatile
  1123  00014E  A4D8               	btfss	status,2,c
  1124  000150  EFAC  F000         	goto	i2u11_41
  1125  000154  EFAE  F000         	goto	i2u11_40
  1126  000158                     i2u11_41:
  1127  000158  EFBA  F000         	goto	i2l941
  1128  00015C                     i2u11_40:
  1129  00015C                     
  1130                           ;newmain.c: 53:         {;newmain.c: 54:             array[i]='\0';
  1131  00015C  0E0E               	movlw	low _array
  1132  00015E  240D               	addwf	_i^0,w,c
  1133  000160  6ED9               	movwf	fsr2l,c
  1134  000162  6ADA               	clrf	fsr2h,c
  1135  000164  0E00               	movlw	high _array
  1136  000166  22DA               	addwfc	fsr2h,f,c
  1137  000168  0E00               	movlw	0
  1138  00016A  6EDF               	movwf	indf2,c
  1139  00016C                     
  1140                           ;newmain.c: 55:             i=0;
  1141  00016C  0E00               	movlw	0
  1142  00016E  6E0D               	movwf	_i^0,c
  1143                           
  1144                           ;newmain.c: 57:         }
  1145  000170  EFC3  F000         	goto	i2l945
  1146  000174                     i2l941:
  1147                           
  1148                           ;newmain.c: 59:         {;newmain.c: 60:             array[i]=RCREG;
  1149  000174  0E0E               	movlw	low _array
  1150  000176  240D               	addwf	_i^0,w,c
  1151  000178  6ED9               	movwf	fsr2l,c
  1152  00017A  6ADA               	clrf	fsr2h,c
  1153  00017C  0E00               	movlw	high _array
  1154  00017E  22DA               	addwfc	fsr2h,f,c
  1155  000180  CFAE FFDF          	movff	4014,indf2	;volatile
  1156  000184                     
  1157                           ;newmain.c: 61:             i++;
  1158  000184  2A0D               	incf	_i^0,f,c
  1159  000186                     i2l945:
  1160                           
  1161                           ;newmain.c: 63:         RCIF=0;
  1162  000186  9A9E               	bcf	3998,5,c	;volatile
  1163  000188                     i2l91:
  1164  000188  C002  FFDA         	movff	??_rec+1,fsr2h
  1165  00018C  C001  FFD9         	movff	??_rec,fsr2l
  1166  000190  9213               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1167  000192  0011               	retfie		f
  1168  000194                     __end_of_rec:
  1169                           	opt callstack 0
  1170  0000                     
  1171                           	psect	rparam
  1172  0000                     
  1173                           	psect	temp
  1174  000013                     btemp:
  1175                           	opt callstack 0
  1176  000013                     	ds	1
  1177  0000                     int$flags	set	btemp
  1178  0000                     wtemp8	set	btemp+1
  1179  0000                     ttemp5	set	btemp+1
  1180  0000                     ttemp6	set	btemp+4
  1181  0000                     ttemp7	set	btemp+8
  1182                           tosu	equ	0xFFF
  1183                           tosh	equ	0xFFE
  1184                           tosl	equ	0xFFD
  1185                           stkptr	equ	0xFFC
  1186                           pclatu	equ	0xFFB
  1187                           pclath	equ	0xFFA
  1188                           pcl	equ	0xFF9
  1189                           tblptru	equ	0xFF8
  1190                           tblptrh	equ	0xFF7
  1191                           tblptrl	equ	0xFF6
  1192                           tablat	equ	0xFF5
  1193                           prodh	equ	0xFF4
  1194                           prodl	equ	0xFF3
  1195                           indf0	equ	0xFEF
  1196                           postinc0	equ	0xFEE
  1197                           postdec0	equ	0xFED
  1198                           preinc0	equ	0xFEC
  1199                           plusw0	equ	0xFEB
  1200                           fsr0h	equ	0xFEA
  1201                           fsr0l	equ	0xFE9
  1202                           wreg	equ	0xFE8
  1203                           indf1	equ	0xFE7
  1204                           postinc1	equ	0xFE6
  1205                           postdec1	equ	0xFE5
  1206                           preinc1	equ	0xFE4
  1207                           plusw1	equ	0xFE3
  1208                           fsr1h	equ	0xFE2
  1209                           fsr1l	equ	0xFE1
  1210                           bsr	equ	0xFE0
  1211                           indf2	equ	0xFDF
  1212                           postinc2	equ	0xFDE
  1213                           postdec2	equ	0xFDD
  1214                           preinc2	equ	0xFDC
  1215                           plusw2	equ	0xFDB
  1216                           fsr2h	equ	0xFDA
  1217                           fsr2l	equ	0xFD9
  1218                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     12      18
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    LCDPutStr@str	PTR const unsigned char  size(2) Largest target is 5
		 -> array(COMRAM[5]), 


Critical Paths under _main in COMRAM

    _main->_LCDGoto
    _LCD_Initialize->_LCDPutCmd
    _LCDPutStr->_LCDPutChar
    _LCDPutChar->_LCDWriteNibble
    _LCDGoto->_LCDPutCmd
    _LCDPutCmd->_LCDWriteNibble

Critical Paths under _rec in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _rec in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _rec in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _rec in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _rec in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _rec in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _rec in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _rec in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _rec in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _rec in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _rec in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _rec in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _rec in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _rec in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _rec in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _rec in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _rec in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1879
                            _BRG9600
                            _LCDGoto
                          _LCDPutStr
                     _LCD_Initialize
                            _pwminit
                             _pwmreg
                            _recinit
 ---------------------------------------------------------------------------------
 (1) _recinit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _pwmreg                                               4     2      2     120
                                              2 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _pwminit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_Initialize                                       1     1      0     461
                                              6 COMRAM     1     1      0
                          _LCDPutCmd
 ---------------------------------------------------------------------------------
 (1) _LCDPutStr                                            3     1      2     627
                                              6 COMRAM     3     1      2
                         _LCDPutChar
 ---------------------------------------------------------------------------------
 (2) _LCDPutChar                                           2     2      0     461
                                              4 COMRAM     2     2      0
                     _LCDWriteNibble
 ---------------------------------------------------------------------------------
 (1) _LCDGoto                                              6     5      1     671
                                              6 COMRAM     6     5      1
                          _LCDPutCmd
 ---------------------------------------------------------------------------------
 (2) _LCDPutCmd                                            2     2      0     461
                                              4 COMRAM     2     2      0
                     _LCDWriteNibble
 ---------------------------------------------------------------------------------
 (3) _LCDWriteNibble                                       2     1      1     394
                                              2 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _BRG9600                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _rec                                                  2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BRG9600
   _LCDGoto
     _LCDPutCmd
       _LCDWriteNibble
   _LCDPutStr
     _LCDPutChar
       _LCDWriteNibble
   _LCD_Initialize
     _LCDPutCmd
       _LCDWriteNibble
   _pwminit
   _pwmreg
   _recinit

 _rec (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E      C      12       1       14.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      12      34        0.0%
DATA                 0      0      12       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Wed Sep 25 23:32:33 2019

                      _i 000D           _LCD_Initialize 0194                       l13 01CC  
                     l22 0240                       l16 02C6                       l34 0132  
                     l19 029A              ?_LCDPutChar 0001                       l28 0206  
                     l77 00A6              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
            __CFG_OSC$HS 000000                      l111 026E                      l108 02E4  
                    l132 0312                      l135 030A                      l951 02C0  
                    l881 0306                      l953 02C2                      l961 0222  
                    l955 02C4                      l947 029E                      l963 0228  
                    l971 028A                      l883 02C8                      l949 02B6  
                    l965 0236                      l957 020A                      l973 0290  
                    l981 01AE                      l885 02D0                      l877 030C  
                    l879 02FC                      l959 0218                      l967 0272  
                    l991 01CE                      l983 01B4                      l975 0194  
                    l887 02E2                      l969 0280                      l993 01D6  
                    l985 01BA                      l977 019C                      l995 01E8  
                    l987 01C0                      l979 019E                      _GIE 007F97  
                    l997 01EA                      l989 01C6                      l999 00C6  
           __CFG_CPB$OFF 000000                      u200 009E                      u201 009A  
                    u130 0206                      u131 0202                      u140 00D6  
                    u125 02BE                      u141 00D2                      u126 02C0  
                    u150 00E6                      u151 00E2                      u160 00FA  
                    u161 00F6                      u217 01A4                      u170 0050  
                    u227 0278                      u171 004C                      u180 006A  
                    u237 012A                      u181 0066                      u190 0084  
                    _PR2 000FCB                      u247 0210                      u191 0080  
                    u257 022E             __CFG_CPD$OFF 000000                      _rec 0008  
        __end_of_BRG9600 030C                      wreg 000FE8             __CFG_LVP$OFF 000000  
        __end_of_LCDGoto 0134             __CFG_WDT$OFF 000000                     l1001 00D6  
                   l1011 0124                     l1003 00EA                     l1005 00FA  
                   l1013 0242                     l1021 001C                     l1007 010E  
                   l1031 002E                     l1023 0020                     l1015 0012  
                   l1009 011E                     l1041 0058                     l1033 0038  
                   l1025 0022                     l1017 0016                     l1051 009E  
                   l1043 006A                     l1035 003C                     l1027 0026  
                   l1019 0018                     l1045 0072                     l1053 00A6  
                   l1037 003E                     l1029 002A                     l1055 00B0  
                   l1047 0084                     l1039 0050                     l1049 008C  
                   ?_rec 0001                     _BRGH 007D62                     _CREN 007D5C  
                   _LATB 000F8A                     _PEIE 007F96                     _RCIE 007CED  
                   _RCIF 007CF5                     i2l91 0188                     _TMR2 000FCC  
                   _SPEN 007D5F                     _TXEN 007D65                     _SYNC 007D64  
                   _main 0012                     fsr2h 000FDA                     indf2 000FDF  
                   fsr2l 000FD9                     btemp 0013       __size_of_LCDPutCmd 003A  
                   start 000E       __size_of_LCDPutStr 003A            __CFG_IESO$OFF 000000  
 __end_of_LCD_Initialize 01CE            __CFG_MCLRE$ON 000000             ___param_bank 000000  
                  ??_rec 0001              LCDPutCmd@ch 0006                    ?_main 0001  
                  _BRG16 007DC3                    i2l941 0174                    i2l933 013E  
                  i2l943 0184                    i2l935 014C                    i2l945 0186  
                  i2l937 015C                    i2l939 016C                    _RCREG 000FAE  
                  _SPBRG 000FAF                    _PORTD 000F83                    _TRISB 000F93  
                  _TRISD 000F95            __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
                  _array 000E          __end_of_recinit 0314      __size_of_LCDPutChar 002C  
                  ttemp5 0014                    ttemp6 0017                    ttemp7 001B  
                  status 000FD8          __end_of_pwminit 02E6                    wtemp8 0014  
        ?_LCD_Initialize 0001          __initialization 02E6             __end_of_main 00C4  
              ??_BRG9600 0003                   ??_main 000D            __activetblptr 000000  
              ??_LCDGoto 0008        __end_of_LCDPutCmd 0242             LCDPutChar@ch 0006  
      __end_of_LCDPutStr 0208                   _CCPR1L 000FBE                   _TMR2ON 007E52  
           LCDPutStr@str 0007                   _TRISC2 007CA2           _LCDWriteNibble 029C  
         __CFG_XINST$OFF 000000           __CFG_STVREN$ON 000000                   _pwmreg 0242  
              ??_recinit 0003                ??_pwminit 0003   __end_of_LCDWriteNibble 02C8  
             __accesstop 0080  __end_of__initialization 02F2          __CFG_PBADEN$OFF 000000  
          ___rparam_used 000001                LCDGoto@ln 0007           __pcstackCOMRAM 0001  
           ??_LCDPutChar 0005          ?_LCDWriteNibble 0003       __end_of_LCDPutChar 029C  
                _BRG9600 02FC                  ?_pwmreg 0003                  _LCDGoto 00C4  
                i2u10_40 014C                  i2u10_41 0148                  i2u11_40 015C  
                i2u11_41 0158         ??_LCD_Initialize 0007                  __Hparam 0000  
                __Lparam 0000                  __pcinit 02E6                  __ramtop 1000  
                __ptext0 0012                  __ptext1 030C                  __ptext2 0242  
                __ptext3 02C8                  __ptext4 0194                  __ptext5 01CE  
                __ptext6 0270                  __ptext7 00C4                  __ptext8 0208  
                __ptext9 029C          __size_of_pwmreg 002E                _T2CONbits 000FCA  
           __size_of_rec 018C                  _recinit 030C                _LCDPutCmd 0208  
                _pwminit 02C8                _LCDPutStr 01CE           __pintcode_body 0134  
   end_of_initialization 02F2                  int_func 0134                _PORTDbits 000F83  
             ?_LCDPutCmd 0001               ?_LCDPutStr 0007              _CCP1CONbits 000FBD  
             LCDGoto@pos 000C               LCDPutStr@i 0009           __end_of_pwmreg 0270  
    start_initialization 02E6         ??_LCDWriteNibble 0004              __end_of_rec 0194  
       __CFG_LPT1OSC$OFF 000000                 ?_BRG9600 0001                 ??_pwmreg 0005  
               ?_LCDGoto 0007              __pbssCOMRAM 000D              ??_LCDPutCmd 0005  
            ??_LCDPutStr 0009        __CFG_CCP2MX$PORTC 000000                __pintcode 0008  
       LCDWriteNibble@ch 0004         LCDWriteNibble@rs 0003                 ?_recinit 0001  
               ?_pwminit 0001              _LCDGoto$119 000A         __CFG_WDTPS$32768 000000  
       __size_of_BRG9600 0010         __size_of_LCDGoto 0070                 __Hrparam 0000  
               __Lrparam 0000       __CFG_BOREN$SBORDIS 000000  __size_of_LCD_Initialize 003A  
             pwmreg@duty 0003         __size_of_recinit 0008                 __ptext10 02FC  
       __size_of_pwminit 001E            __size_of_main 00B2                 int$flags 0013  
             _LCDPutChar 0270                 intlevel2 0000  __size_of_LCDWriteNibble 002C  
