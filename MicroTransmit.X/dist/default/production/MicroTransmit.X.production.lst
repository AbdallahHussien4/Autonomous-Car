

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sat Sep 28 13:28:55 2019

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    20                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    28                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    29  0000                     
    30                           	psect	smallconst
    31  001000                     __psmallconst:
    32                           	opt stack 0
    33  001000  00                 	db	0
    34  001001                     _dpowers:
    35                           	opt stack 0
    36  001001  0001               	dw	1
    37  001003  000A               	dw	10
    38  001005  0064               	dw	100
    39  001007  03E8               	dw	1000
    40  001009  2710               	dw	10000
    41  00100B                     __end_of_dpowers:
    42                           	opt stack 0
    43  0000                     _ADRES	set	4035
    44  0000                     _CCPR1	set	4030
    45  0000                     _TMR1	set	4046
    46  0000                     _ADCON0bits	set	4034
    47  0000                     _ADCON1bits	set	4033
    48  0000                     _ADCON2bits	set	4032
    49  0000                     _CCP1CONbits	set	4029
    50  0000                     _LATB	set	3978
    51  0000                     _PORTBbits	set	3969
    52  0000                     _PORTD	set	3971
    53  0000                     _PORTDbits	set	3971
    54  0000                     _SPBRG	set	4015
    55  0000                     _T1CONbits	set	4045
    56  0000                     _TRISB	set	3987
    57  0000                     _TRISD	set	3989
    58  0000                     _TXREG	set	4013
    59  0000                     _ADFM	set	32263
    60  0000                     _ADIE	set	31982
    61  0000                     _ADIF	set	31990
    62  0000                     _ADON	set	32272
    63  0000                     _BRG16	set	32195
    64  0000                     _BRGH	set	32098
    65  0000                     _CCP1IE	set	31978
    66  0000                     _CCP1IF	set	31986
    67  0000                     _GIE	set	32663
    68  0000                     _PEIE	set	32662
    69  0000                     _SPEN	set	32095
    70  0000                     _SYNC	set	32100
    71  0000                     _T1SYNC	set	32362
    72  0000                     _TMR1CS	set	32361
    73  0000                     _TMR1ON	set	32360
    74  0000                     _TRISC2	set	31906
    75  0000                     _TRMT	set	32097
    76  0000                     _TXEN	set	32101
    77  00100B                     STR_1:
    78  00100B  53                 	db	83	;'S'
    79  00100C  50                 	db	80	;'P'
    80  00100D  44                 	db	68	;'D'
    81  00100E  3D                 	db	61	;'='
    82  00100F  25                 	db	37
    83  001010  75                 	db	117	;'u'
    84  001011  0D                 	db	13
    85  001012  00                 	db	0
    86  001013                     STR_4:
    87  001013  44                 	db	68	;'D'
    88  001014  69                 	db	105	;'i'
    89  001015  72                 	db	114	;'r'
    90  001016  3D                 	db	61	;'='
    91  001017  64                 	db	100	;'d'
    92  001018  0D                 	db	13
    93  001019  00                 	db	0
    94  00101A                     STR_5:
    95  00101A  44                 	db	68	;'D'
    96  00101B  69                 	db	105	;'i'
    97  00101C  72                 	db	114	;'r'
    98  00101D  3D                 	db	61	;'='
    99  00101E  6C                 	db	108	;'l'
   100  00101F  0D                 	db	13
   101  001020  00                 	db	0
   102  001021                     STR_3:
   103  001021  44                 	db	68	;'D'
   104  001022  69                 	db	105	;'i'
   105  001023  72                 	db	114	;'r'
   106  001024  3D                 	db	61	;'='
   107  001025  72                 	db	114	;'r'
   108  001026  0D                 	db	13
   109  001027  00                 	db	0
   110  001028                     STR_2:
   111  001028  44                 	db	68	;'D'
   112  001029  69                 	db	105	;'i'
   113  00102A  72                 	db	114	;'r'
   114  00102B  3D                 	db	61	;'='
   115  00102C  75                 	db	117	;'u'
   116  00102D  0D                 	db	13
   117  00102E  00                 	db	0
   118                           
   119                           ; #config settings
   120  00102F  00                 	db	0	; dummy byte at the end
   121  0000                     
   122                           	psect	cinit
   123  001620                     __pcinit:
   124                           	opt stack 0
   125  001620                     start_initialization:
   126                           	opt stack 0
   127  001620                     __initialization:
   128                           	opt stack 0
   129                           
   130                           ; Clear objects allocated to COMRAM (10 bytes)
   131  001620  EE00  F02E         	lfsr	0,__pbssCOMRAM
   132  001624  0E0A               	movlw	10
   133  001626                     clear_0:
   134  001626  6AEE               	clrf	postinc0,c
   135  001628  06E8               	decf	wreg,f,c
   136  00162A  E1FD               	bnz	clear_0
   137  00162C                     end_of_initialization:
   138                           	opt stack 0
   139  00162C                     __end_of__initialization:
   140                           	opt stack 0
   141  00162C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   142  00162E  6EF8               	movwf	tblptru,c
   143  001630  0100               	movlb	0
   144  001632  EF00  F00B         	goto	_main	;jump to C main() function
   145                           tblptru	equ	0xFF8
   146                           postinc0	equ	0xFEE
   147                           wreg	equ	0xFE8
   148                           
   149                           	psect	bssCOMRAM
   150  00002E                     __pbssCOMRAM:
   151                           	opt stack 0
   152  00002E                     _txt:
   153                           	opt stack 0
   154  00002E                     	ds	10
   155                           tblptru	equ	0xFF8
   156                           postinc0	equ	0xFEE
   157                           wreg	equ	0xFE8
   158                           
   159                           	psect	cstackCOMRAM
   160  000001                     __pcstackCOMRAM:
   161                           	opt stack 0
   162  000001                     ?___lwdiv:
   163                           	opt stack 0
   164  000001                     i2LCDWriteNibble@rs:
   165                           	opt stack 0
   166  000001                     ___lwdiv@dividend:
   167                           	opt stack 0
   168                           
   169                           ; 2 bytes @ 0x0
   170  000001                     	ds	1
   171  000002                     i2LCDWriteNibble@ch:
   172                           	opt stack 0
   173                           
   174                           ; 1 bytes @ 0x1
   175  000002                     	ds	1
   176  000003                     ??i2_LCDPutCmd:
   177  000003                     ___lwdiv@divisor:
   178                           	opt stack 0
   179                           
   180                           ; 2 bytes @ 0x2
   181  000003                     	ds	1
   182  000004                     i2LCDPutCmd@ch:
   183                           	opt stack 0
   184                           
   185                           ; 1 bytes @ 0x3
   186  000004                     	ds	1
   187  000005                     LCDGoto@ln:
   188                           	opt stack 0
   189  000005                     ___lwdiv@quotient:
   190                           	opt stack 0
   191                           
   192                           ; 2 bytes @ 0x4
   193  000005                     	ds	1
   194  000006                     ??_LCDGoto:
   195                           
   196                           ; 0 bytes @ 0x5
   197  000006                     	ds	1
   198  000007                     ___lwdiv@counter:
   199                           	opt stack 0
   200                           
   201                           ; 1 bytes @ 0x6
   202  000007                     	ds	1
   203  000008                     ?___lwmod:
   204                           	opt stack 0
   205  000008                     _LCDGoto$116:
   206                           	opt stack 0
   207  000008                     ___lwmod@dividend:
   208                           	opt stack 0
   209                           
   210                           ; 2 bytes @ 0x7
   211  000008                     	ds	2
   212  00000A                     LCDGoto@pos:
   213                           	opt stack 0
   214  00000A                     ___lwmod@divisor:
   215                           	opt stack 0
   216                           
   217                           ; 2 bytes @ 0x9
   218  00000A                     	ds	2
   219  00000C                     ___lwmod@counter:
   220                           	opt stack 0
   221                           
   222                           ; 1 bytes @ 0xB
   223  00000C                     	ds	1
   224  00000D                     ?_sprintf:
   225                           	opt stack 0
   226  00000D                     sprintf@sp:
   227                           	opt stack 0
   228                           
   229                           ; 2 bytes @ 0xC
   230  00000D                     	ds	2
   231  00000F                     sprintf@f:
   232                           	opt stack 0
   233                           
   234                           ; 2 bytes @ 0xE
   235  00000F                     	ds	4
   236  000013                     sprintf@flag:
   237                           	opt stack 0
   238                           
   239                           ; 1 bytes @ 0x12
   240  000013                     	ds	1
   241  000014                     sprintf@ap:
   242                           	opt stack 0
   243                           
   244                           ; 2 bytes @ 0x13
   245  000014                     	ds	2
   246  000016                     sprintf@val:
   247                           	opt stack 0
   248                           
   249                           ; 2 bytes @ 0x15
   250  000016                     	ds	2
   251  000018                     sprintf@prec:
   252                           	opt stack 0
   253                           
   254                           ; 1 bytes @ 0x17
   255  000018                     	ds	1
   256  000019                     sprintf@c:
   257                           	opt stack 0
   258                           
   259                           ; 1 bytes @ 0x18
   260  000019                     	ds	1
   261  00001A                     ??_adc:
   262                           
   263                           ; 0 bytes @ 0x19
   264  00001A                     	ds	14
   265  000028                     LCDWriteNibble@rs:
   266                           	opt stack 0
   267  000028                     SEND@x:
   268                           	opt stack 0
   269  000028                     AdcIni@duty:
   270                           	opt stack 0
   271                           
   272                           ; 2 bytes @ 0x27
   273  000028                     	ds	1
   274  000029                     LCDWriteNibble@ch:
   275                           	opt stack 0
   276                           
   277                           ; 1 bytes @ 0x28
   278  000029                     	ds	1
   279  00002A                     ??_LCDPutCmd:
   280  00002A                     ??_SEND:
   281                           
   282                           ; 0 bytes @ 0x29
   283  00002A                     	ds	1
   284  00002B                     LCDPutCmd@ch:
   285                           	opt stack 0
   286                           
   287                           ; 1 bytes @ 0x2A
   288  00002B                     	ds	1
   289  00002C                     ??_LCD_Initialize:
   290  00002C                     SEND@i:
   291                           	opt stack 0
   292                           
   293                           ; 1 bytes @ 0x2B
   294  00002C                     	ds	1
   295  00002D                     ??_Buttons:
   296                           
   297                           ; 0 bytes @ 0x2C
   298  00002D                     	ds	1
   299  00002E                     tblptru	equ	0xFF8
   300                           postinc0	equ	0xFEE
   301                           wreg	equ	0xFE8
   302                           
   303                           ; 0 bytes @ 0x2D
   304 ;;
   305 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   306 ;;
   307 ;; *************** function _main *****************
   308 ;; Defined at:
   309 ;;		line 9 in file "Transmit.c"
   310 ;; Parameters:    Size  Location     Type
   311 ;;		None
   312 ;; Auto vars:     Size  Location     Type
   313 ;;		None
   314 ;; Return value:  Size  Location     Type
   315 ;;		None               void
   316 ;; Registers used:
   317 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   318 ;; Tracked objects:
   319 ;;		On entry : 0/0
   320 ;;		On exit  : 0/0
   321 ;;		Unchanged: 0/0
   322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   326 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   327 ;;Total ram usage:        0 bytes
   328 ;; Hardware stack levels required when called:    7
   329 ;; This function calls:
   330 ;;		_AdcIni
   331 ;;		_BRG9600
   332 ;;		_Buttons
   333 ;;		_CompareIni
   334 ;;		_LCD_Initialize
   335 ;;		_Ports
   336 ;; This function is called by:
   337 ;;		Startup code after reset
   338 ;; This function uses a non-reentrant model
   339 ;;
   340                           
   341                           	psect	text0
   342  001600                     __ptext0:
   343                           	opt stack 0
   344  001600                     _main:
   345                           	opt stack 24
   346                           
   347                           ;Transmit.c: 11: BRG9600();
   348                           
   349                           ;incstack = 0
   350  001600  EC1B  F00B         	call	_BRG9600	;wreg free
   351                           
   352                           ;Transmit.c: 12: Ports();
   353  001604  EC23  F00B         	call	_Ports	;wreg free
   354                           
   355                           ;Transmit.c: 13: CompareIni();
   356  001608  ECBD  F00A         	call	_CompareIni	;wreg free
   357                           
   358                           ;Transmit.c: 14: AdcIni();
   359  00160C  EC48  F00A         	call	_AdcIni	;wreg free
   360                           
   361                           ;Transmit.c: 15: LCD_Initialize();
   362  001610  EC66  F00A         	call	_LCD_Initialize	;wreg free
   363  001614  D000               	goto	l1298
   364  001616                     l1298:
   365                           
   366                           ;Transmit.c: 19: {
   367                           ;Transmit.c: 20: Buttons();
   368  001616  ECB4  F008         	call	_Buttons	;wreg free
   369  00161A  D7FD               	goto	l1298
   370  00161C  EF0C  F000         	goto	start
   371  001620                     __end_of_main:
   372                           	opt stack 0
   373                           tblptru	equ	0xFF8
   374                           postinc0	equ	0xFEE
   375                           wreg	equ	0xFE8
   376                           
   377 ;; *************** function _Ports *****************
   378 ;; Defined at:
   379 ;;		line 26 in file "Var_Fun.c"
   380 ;; Parameters:    Size  Location     Type
   381 ;;		None
   382 ;; Auto vars:     Size  Location     Type
   383 ;;		None
   384 ;; Return value:  Size  Location     Type
   385 ;;		None               void
   386 ;; Registers used:
   387 ;;		wreg, status,2
   388 ;; Tracked objects:
   389 ;;		On entry : 0/0
   390 ;;		On exit  : 0/0
   391 ;;		Unchanged: 0/0
   392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   396 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   397 ;;Total ram usage:        0 bytes
   398 ;; Hardware stack levels used:    1
   399 ;; Hardware stack levels required when called:    4
   400 ;; This function calls:
   401 ;;		Nothing
   402 ;; This function is called by:
   403 ;;		_main
   404 ;; This function uses a non-reentrant model
   405 ;;
   406                           
   407                           	psect	text1
   408  001646                     __ptext1:
   409                           	opt stack 0
   410  001646                     _Ports:
   411                           	opt stack 26
   412                           
   413                           ;Var_Fun.c: 28: TRISB=0xFF;
   414                           
   415                           ;incstack = 0
   416  001646  6893               	setf	3987,c	;volatile
   417                           
   418                           ;Var_Fun.c: 29: LATB=0x00;
   419  001648  0E00               	movlw	0
   420  00164A  6E8A               	movwf	3978,c	;volatile
   421  00164C  0012               	return		;funcret
   422  00164E                     __end_of_Ports:
   423                           	opt stack 0
   424                           tblptru	equ	0xFF8
   425                           postinc0	equ	0xFEE
   426                           wreg	equ	0xFE8
   427                           
   428 ;; *************** function _LCD_Initialize *****************
   429 ;; Defined at:
   430 ;;		line 46 in file "lcd.c"
   431 ;; Parameters:    Size  Location     Type
   432 ;;		None
   433 ;; Auto vars:     Size  Location     Type
   434 ;;		None
   435 ;; Return value:  Size  Location     Type
   436 ;;		None               void
   437 ;; Registers used:
   438 ;;		wreg, status,2, status,0, cstack
   439 ;; Tracked objects:
   440 ;;		On entry : 0/0
   441 ;;		On exit  : 0/0
   442 ;;		Unchanged: 0/0
   443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   446 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   447 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   448 ;;Total ram usage:        1 bytes
   449 ;; Hardware stack levels used:    1
   450 ;; Hardware stack levels required when called:    6
   451 ;; This function calls:
   452 ;;		_LCDPutCmd
   453 ;; This function is called by:
   454 ;;		_main
   455 ;; This function uses a non-reentrant model
   456 ;;
   457                           
   458                           	psect	text2
   459  0014CC                     __ptext2:
   460                           	opt stack 0
   461  0014CC                     _LCD_Initialize:
   462                           	opt stack 24
   463                           
   464                           ;lcd.c: 49: PORTD = 0;
   465                           
   466                           ;incstack = 0
   467  0014CC  0E00               	movlw	0
   468  0014CE  6E83               	movwf	3971,c	;volatile
   469                           
   470                           ;lcd.c: 51: TRISD = 0x00;
   471  0014D0  0E00               	movlw	0
   472  0014D2  6E95               	movwf	3989,c	;volatile
   473                           
   474                           ;lcd.c: 54: PORTDbits.RD7 = 1;
   475  0014D4  8E83               	bsf	3971,7,c	;volatile
   476                           
   477                           ;lcd.c: 57: _delay((unsigned long)((15)*(8e6/4000.0)));
   478  0014D6  0E27               	movlw	39
   479  0014D8  6E2C               	movwf	??_LCD_Initialize& (0+255),c
   480  0014DA  0EF5               	movlw	245
   481  0014DC                     u697:
   482  0014DC  2EE8               	decfsz	wreg,f,c
   483  0014DE  D7FE               	goto	u697
   484  0014E0  2E2C               	decfsz	??_LCD_Initialize& (0+255),f,c
   485  0014E2  D7FC               	goto	u697
   486  0014E4  F000               	nop	
   487                           
   488                           ;lcd.c: 60: LCDPutCmd(0x32);
   489  0014E6  0E32               	movlw	50
   490  0014E8  EC83  F00A         	call	_LCDPutCmd
   491                           
   492                           ;lcd.c: 63: LCDPutCmd(0x28);
   493  0014EC  0E28               	movlw	40
   494  0014EE  EC83  F00A         	call	_LCDPutCmd
   495                           
   496                           ;lcd.c: 66: LCDPutCmd(0x0C);
   497  0014F2  0E0C               	movlw	12
   498  0014F4  EC83  F00A         	call	_LCDPutCmd
   499                           
   500                           ;lcd.c: 68: LCDPutCmd(0x01);
   501  0014F8  0E01               	movlw	1
   502  0014FA  EC83  F00A         	call	_LCDPutCmd
   503                           
   504                           ;lcd.c: 71: LCDPutCmd(0x06);
   505  0014FE  0E06               	movlw	6
   506  001500  EC83  F00A         	call	_LCDPutCmd
   507  001504  0012               	return		;funcret
   508  001506                     __end_of_LCD_Initialize:
   509                           	opt stack 0
   510                           tblptru	equ	0xFF8
   511                           postinc0	equ	0xFEE
   512                           wreg	equ	0xFE8
   513                           
   514 ;; *************** function _LCDPutCmd *****************
   515 ;; Defined at:
   516 ;;		line 118 in file "lcd.c"
   517 ;; Parameters:    Size  Location     Type
   518 ;;  ch              1    wreg     unsigned char 
   519 ;; Auto vars:     Size  Location     Type
   520 ;;  ch              1   42[COMRAM] unsigned char 
   521 ;; Return value:  Size  Location     Type
   522 ;;		None               void
   523 ;; Registers used:
   524 ;;		wreg, status,2, status,0, cstack
   525 ;; Tracked objects:
   526 ;;		On entry : 0/0
   527 ;;		On exit  : 0/0
   528 ;;		Unchanged: 0/0
   529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   531 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   532 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   533 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   534 ;;Total ram usage:        2 bytes
   535 ;; Hardware stack levels used:    1
   536 ;; Hardware stack levels required when called:    5
   537 ;; This function calls:
   538 ;;		_LCDWriteNibble
   539 ;; This function is called by:
   540 ;;		_LCD_Initialize
   541 ;; This function uses a non-reentrant model
   542 ;;
   543                           
   544                           	psect	text3
   545  001506                     __ptext3:
   546                           	opt stack 0
   547  001506                     _LCDPutCmd:
   548                           	opt stack 24
   549                           
   550                           ;incstack = 0
   551                           ;LCDPutCmd@ch stored from wreg
   552  001506  6E2B               	movwf	LCDPutCmd@ch,c
   553                           
   554                           ;lcd.c: 120: _delay((unsigned long)((5)*(8e6/4000.0)));
   555  001508  0E0D               	movlw	13
   556  00150A  6E2A               	movwf	??_LCDPutCmd& (0+255),c
   557  00150C  0EFC               	movlw	252
   558  00150E                     u707:
   559  00150E  2EE8               	decfsz	wreg,f,c
   560  001510  D7FE               	goto	u707
   561  001512  2E2A               	decfsz	??_LCDPutCmd& (0+255),f,c
   562  001514  D7FC               	goto	u707
   563                           
   564                           ;lcd.c: 123: LCDWriteNibble(ch,0);
   565  001516  0E00               	movlw	0
   566  001518  6E28               	movwf	LCDWriteNibble@rs,c
   567  00151A  502B               	movf	LCDPutCmd@ch,w,c
   568  00151C  ECD4  F00A         	call	_LCDWriteNibble
   569                           
   570                           ;lcd.c: 126: ch = (ch << 4);
   571  001520  382B               	swapf	LCDPutCmd@ch,w,c
   572  001522  0BF0               	andlw	240
   573  001524  6E2B               	movwf	LCDPutCmd@ch,c
   574                           
   575                           ;lcd.c: 128: _delay((unsigned long)((1)*(8e6/4000.0)));
   576  001526  0E03               	movlw	3
   577  001528  6E2A               	movwf	??_LCDPutCmd& (0+255),c
   578  00152A  0E98               	movlw	152
   579  00152C                     u717:
   580  00152C  2EE8               	decfsz	wreg,f,c
   581  00152E  D7FE               	goto	u717
   582  001530  2E2A               	decfsz	??_LCDPutCmd& (0+255),f,c
   583  001532  D7FC               	goto	u717
   584                           
   585                           ;lcd.c: 131: LCDWriteNibble(ch,0);
   586  001534  0E00               	movlw	0
   587  001536  6E28               	movwf	LCDWriteNibble@rs,c
   588  001538  502B               	movf	LCDPutCmd@ch,w,c
   589  00153A  ECD4  F00A         	call	_LCDWriteNibble
   590  00153E  0012               	return		;funcret
   591  001540                     __end_of_LCDPutCmd:
   592                           	opt stack 0
   593                           tblptru	equ	0xFF8
   594                           postinc0	equ	0xFEE
   595                           wreg	equ	0xFE8
   596                           
   597 ;; *************** function _LCDWriteNibble *****************
   598 ;; Defined at:
   599 ;;		line 76 in file "lcd.c"
   600 ;; Parameters:    Size  Location     Type
   601 ;;  ch              1    wreg     unsigned char 
   602 ;;  rs              1   39[COMRAM] unsigned char 
   603 ;; Auto vars:     Size  Location     Type
   604 ;;  ch              1   40[COMRAM] unsigned char 
   605 ;; Return value:  Size  Location     Type
   606 ;;		None               void
   607 ;; Registers used:
   608 ;;		wreg, status,2, status,0
   609 ;; Tracked objects:
   610 ;;		On entry : 0/0
   611 ;;		On exit  : 0/0
   612 ;;		Unchanged: 0/0
   613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   614 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   615 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   617 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   618 ;;Total ram usage:        2 bytes
   619 ;; Hardware stack levels used:    1
   620 ;; Hardware stack levels required when called:    4
   621 ;; This function calls:
   622 ;;		Nothing
   623 ;; This function is called by:
   624 ;;		_LCDPutCmd
   625 ;;		_LCDPutChar
   626 ;; This function uses a non-reentrant model
   627 ;;
   628                           
   629                           	psect	text4
   630  0015A8                     __ptext4:
   631                           	opt stack 0
   632  0015A8                     _LCDWriteNibble:
   633                           	opt stack 24
   634                           
   635                           ;incstack = 0
   636                           ;LCDWriteNibble@ch stored from wreg
   637  0015A8  6E29               	movwf	LCDWriteNibble@ch,c
   638                           
   639                           ;lcd.c: 79: ch = (ch >> 4);
   640  0015AA  3829               	swapf	LCDWriteNibble@ch,w,c
   641  0015AC  0B0F               	andlw	15
   642  0015AE  6E29               	movwf	LCDWriteNibble@ch,c
   643                           
   644                           ;lcd.c: 82: ch = (ch & 0x0F);
   645  0015B0  5029               	movf	LCDWriteNibble@ch,w,c
   646  0015B2  0B0F               	andlw	15
   647  0015B4  6E29               	movwf	LCDWriteNibble@ch,c
   648                           
   649                           ;lcd.c: 85: PORTD = (PORTD & 0xF0);
   650  0015B6  5083               	movf	3971,w,c	;volatile
   651  0015B8  0BF0               	andlw	240
   652  0015BA  6E83               	movwf	3971,c	;volatile
   653                           
   654                           ;lcd.c: 88: PORTD = (PORTD | ch);
   655  0015BC  5083               	movf	3971,w,c	;volatile
   656  0015BE  1029               	iorwf	LCDWriteNibble@ch,w,c
   657  0015C0  6E83               	movwf	3971,c	;volatile
   658                           
   659                           ;lcd.c: 91: PORTDbits.RD4 = rs;
   660  0015C2  B028               	btfsc	LCDWriteNibble@rs,0,c
   661  0015C4  D002               	bra	u355
   662  0015C6  9883               	bcf	3971,4,c	;volatile
   663  0015C8  D001               	bra	u356
   664  0015CA                     u355:
   665  0015CA  8883               	bsf	3971,4,c	;volatile
   666  0015CC                     u356:
   667                           
   668                           ;lcd.c: 94: PORTDbits.RD5 = 0;
   669  0015CC  9A83               	bcf	3971,5,c	;volatile
   670                           
   671                           ;lcd.c: 97: PORTDbits.RD6 = 1;
   672  0015CE  8C83               	bsf	3971,6,c	;volatile
   673                           
   674                           ;lcd.c: 100: PORTDbits.RD6 = 0;
   675  0015D0  9C83               	bcf	3971,6,c	;volatile
   676  0015D2  0012               	return		;funcret
   677  0015D4                     __end_of_LCDWriteNibble:
   678                           	opt stack 0
   679                           tblptru	equ	0xFF8
   680                           postinc0	equ	0xFEE
   681                           wreg	equ	0xFE8
   682                           
   683 ;; *************** function _CompareIni *****************
   684 ;; Defined at:
   685 ;;		line 72 in file "Var_Fun.c"
   686 ;; Parameters:    Size  Location     Type
   687 ;;		None
   688 ;; Auto vars:     Size  Location     Type
   689 ;;		None
   690 ;; Return value:  Size  Location     Type
   691 ;;		None               void
   692 ;; Registers used:
   693 ;;		wreg, status,2
   694 ;; Tracked objects:
   695 ;;		On entry : 0/0
   696 ;;		On exit  : 0/0
   697 ;;		Unchanged: 0/0
   698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   702 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   703 ;;Total ram usage:        0 bytes
   704 ;; Hardware stack levels used:    1
   705 ;; Hardware stack levels required when called:    4
   706 ;; This function calls:
   707 ;;		Nothing
   708 ;; This function is called by:
   709 ;;		_main
   710 ;; This function uses a non-reentrant model
   711 ;;
   712                           
   713                           	psect	text5
   714  00157A                     __ptext5:
   715                           	opt stack 0
   716  00157A                     _CompareIni:
   717                           	opt stack 26
   718                           
   719                           ;Var_Fun.c: 74: CCP1CONbits.CCP1M=0b0010;
   720                           
   721                           ;incstack = 0
   722  00157A  50BD               	movf	4029,w,c	;volatile
   723  00157C  0BF0               	andlw	-16
   724  00157E  0902               	iorlw	2
   725  001580  6EBD               	movwf	4029,c	;volatile
   726                           
   727                           ;Var_Fun.c: 75: TRISC2=0;
   728  001582  9494               	bcf	3988,2,c	;volatile
   729                           
   730                           ;Var_Fun.c: 77: CCP1IF=0;
   731  001584  949E               	bcf	3998,2,c	;volatile
   732                           
   733                           ;Var_Fun.c: 78: CCP1IE=1;
   734  001586  849D               	bsf	3997,2,c	;volatile
   735                           
   736                           ;Var_Fun.c: 79: T1CONbits.RD16=1;
   737  001588  8ECD               	bsf	4045,7,c	;volatile
   738                           
   739                           ;Var_Fun.c: 80: T1CONbits.T1OSCEN=1;
   740  00158A  86CD               	bsf	4045,3,c	;volatile
   741                           
   742                           ;Var_Fun.c: 81: T1CONbits.T1CKPS=0b11;
   743  00158C  0E30               	movlw	48
   744  00158E  12CD               	iorwf	4045,f,c	;volatile
   745                           
   746                           ;Var_Fun.c: 82: T1SYNC=0;
   747  001590  94CD               	bcf	4045,2,c	;volatile
   748                           
   749                           ;Var_Fun.c: 84: TMR1CS=1;
   750  001592  82CD               	bsf	4045,1,c	;volatile
   751                           
   752                           ;Var_Fun.c: 85: TMR1=0;
   753  001594  0E00               	movlw	0
   754  001596  6ECF               	movwf	4047,c	;volatile
   755  001598  0E00               	movlw	0
   756  00159A  6ECE               	movwf	4046,c	;volatile
   757                           
   758                           ;Var_Fun.c: 86: CCPR1=62500;
   759  00159C  0EF4               	movlw	244
   760  00159E  6EBF               	movwf	4031,c	;volatile
   761  0015A0  0E24               	movlw	36
   762  0015A2  6EBE               	movwf	4030,c	;volatile
   763                           
   764                           ;Var_Fun.c: 87: TMR1ON=1;
   765  0015A4  80CD               	bsf	4045,0,c	;volatile
   766  0015A6  0012               	return		;funcret
   767  0015A8                     __end_of_CompareIni:
   768                           	opt stack 0
   769                           tblptru	equ	0xFF8
   770                           postinc0	equ	0xFEE
   771                           wreg	equ	0xFE8
   772                           
   773 ;; *************** function _Buttons *****************
   774 ;; Defined at:
   775 ;;		line 32 in file "Var_Fun.c"
   776 ;; Parameters:    Size  Location     Type
   777 ;;		None
   778 ;; Auto vars:     Size  Location     Type
   779 ;;		None
   780 ;; Return value:  Size  Location     Type
   781 ;;		None               void
   782 ;; Registers used:
   783 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   784 ;; Tracked objects:
   785 ;;		On entry : 0/0
   786 ;;		On exit  : 0/0
   787 ;;		Unchanged: 0/0
   788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   791 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   792 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   793 ;;Total ram usage:        1 bytes
   794 ;; Hardware stack levels used:    1
   795 ;; Hardware stack levels required when called:    5
   796 ;; This function calls:
   797 ;;		_SEND
   798 ;; This function is called by:
   799 ;;		_main
   800 ;; This function uses a non-reentrant model
   801 ;;
   802                           
   803                           	psect	text6
   804  001168                     __ptext6:
   805                           	opt stack 0
   806  001168                     _Buttons:
   807                           	opt stack 25
   808                           
   809                           ;Var_Fun.c: 35: if(!PORTBbits.RB0)
   810                           
   811                           ;incstack = 0
   812  001168  B081               	btfsc	3969,0,c	;volatile
   813  00116A  D01A               	goto	l157
   814                           
   815                           ;Var_Fun.c: 36: {
   816                           ;Var_Fun.c: 37: _delay((unsigned long)((10)*(8e6/4000.0)));
   817  00116C  0E1A               	movlw	26
   818  00116E  6E2D               	movwf	??_Buttons& (0+255),c
   819  001170  0EF8               	movlw	248
   820  001172                     u727:
   821  001172  2EE8               	decfsz	wreg,f,c
   822  001174  D7FE               	goto	u727
   823  001176  2E2D               	decfsz	??_Buttons& (0+255),f,c
   824  001178  D7FC               	goto	u727
   825  00117A  D000               	nop2	
   826                           
   827                           ;Var_Fun.c: 38: while(!PORTBbits.RB0);
   828  00117C  D000               	goto	l158
   829  00117E                     l158:
   830  00117E  A081               	btfss	3969,0,c	;volatile
   831  001180  D7FE               	goto	l158
   832                           
   833                           ;Var_Fun.c: 39: _delay((unsigned long)((10)*(8e6/4000.0)));
   834  001182  0E1A               	movlw	26
   835  001184  6E2D               	movwf	??_Buttons& (0+255),c
   836  001186  0EF8               	movlw	248
   837  001188                     u737:
   838  001188  2EE8               	decfsz	wreg,f,c
   839  00118A  D7FE               	goto	u737
   840  00118C  2E2D               	decfsz	??_Buttons& (0+255),f,c
   841  00118E  D7FC               	goto	u737
   842  001190  D000               	nop2	
   843                           
   844                           ;Var_Fun.c: 40: SEND("Dir=u\r");
   845  001192  0E28               	movlw	low STR_2
   846  001194  6E28               	movwf	SEND@x,c
   847  001196  0E10               	movlw	high STR_2
   848  001198  6E29               	movwf	SEND@x+1,c
   849  00119A  EC90  F009         	call	_SEND	;wreg free
   850                           
   851                           ;Var_Fun.c: 41: }
   852  00119E  D070               	goto	l181
   853  0011A0                     l157:
   854                           
   855                           ;Var_Fun.c: 42: else if(!PORTBbits.RB1)
   856  0011A0  B281               	btfsc	3969,1,c	;volatile
   857  0011A2  D01A               	goto	l162
   858                           
   859                           ;Var_Fun.c: 43: {
   860                           ;Var_Fun.c: 44: _delay((unsigned long)((10)*(8e6/4000.0)));
   861  0011A4  0E1A               	movlw	26
   862  0011A6  6E2D               	movwf	??_Buttons& (0+255),c
   863  0011A8  0EF8               	movlw	248
   864  0011AA                     u747:
   865  0011AA  2EE8               	decfsz	wreg,f,c
   866  0011AC  D7FE               	goto	u747
   867  0011AE  2E2D               	decfsz	??_Buttons& (0+255),f,c
   868  0011B0  D7FC               	goto	u747
   869  0011B2  D000               	nop2	
   870                           
   871                           ;Var_Fun.c: 45: while(!PORTBbits.RB1);
   872  0011B4  D000               	goto	l163
   873  0011B6                     l163:
   874  0011B6  A281               	btfss	3969,1,c	;volatile
   875  0011B8  D7FE               	goto	l163
   876                           
   877                           ;Var_Fun.c: 46: _delay((unsigned long)((10)*(8e6/4000.0)));
   878  0011BA  0E1A               	movlw	26
   879  0011BC  6E2D               	movwf	??_Buttons& (0+255),c
   880  0011BE  0EF8               	movlw	248
   881  0011C0                     u757:
   882  0011C0  2EE8               	decfsz	wreg,f,c
   883  0011C2  D7FE               	goto	u757
   884  0011C4  2E2D               	decfsz	??_Buttons& (0+255),f,c
   885  0011C6  D7FC               	goto	u757
   886  0011C8  D000               	nop2	
   887                           
   888                           ;Var_Fun.c: 47: SEND("Dir=r\r");
   889  0011CA  0E21               	movlw	low STR_3
   890  0011CC  6E28               	movwf	SEND@x,c
   891  0011CE  0E10               	movlw	high STR_3
   892  0011D0  6E29               	movwf	SEND@x+1,c
   893  0011D2  EC90  F009         	call	_SEND	;wreg free
   894                           
   895                           ;Var_Fun.c: 48: }
   896  0011D6  D054               	goto	l181
   897  0011D8                     l162:
   898                           
   899                           ;Var_Fun.c: 49: else if(!PORTBbits.RB2)
   900  0011D8  B481               	btfsc	3969,2,c	;volatile
   901  0011DA  D01A               	goto	l167
   902                           
   903                           ;Var_Fun.c: 50: {
   904                           ;Var_Fun.c: 51: _delay((unsigned long)((10)*(8e6/4000.0)));
   905  0011DC  0E1A               	movlw	26
   906  0011DE  6E2D               	movwf	??_Buttons& (0+255),c
   907  0011E0  0EF8               	movlw	248
   908  0011E2                     u767:
   909  0011E2  2EE8               	decfsz	wreg,f,c
   910  0011E4  D7FE               	goto	u767
   911  0011E6  2E2D               	decfsz	??_Buttons& (0+255),f,c
   912  0011E8  D7FC               	goto	u767
   913  0011EA  D000               	nop2	
   914                           
   915                           ;Var_Fun.c: 52: while(!PORTBbits.RB2);
   916  0011EC  D000               	goto	l168
   917  0011EE                     l168:
   918  0011EE  A481               	btfss	3969,2,c	;volatile
   919  0011F0  D7FE               	goto	l168
   920                           
   921                           ;Var_Fun.c: 53: _delay((unsigned long)((10)*(8e6/4000.0)));
   922  0011F2  0E1A               	movlw	26
   923  0011F4  6E2D               	movwf	??_Buttons& (0+255),c
   924  0011F6  0EF8               	movlw	248
   925  0011F8                     u777:
   926  0011F8  2EE8               	decfsz	wreg,f,c
   927  0011FA  D7FE               	goto	u777
   928  0011FC  2E2D               	decfsz	??_Buttons& (0+255),f,c
   929  0011FE  D7FC               	goto	u777
   930  001200  D000               	nop2	
   931                           
   932                           ;Var_Fun.c: 54: SEND("Dir=d\r");
   933  001202  0E13               	movlw	low STR_4
   934  001204  6E28               	movwf	SEND@x,c
   935  001206  0E10               	movlw	high STR_4
   936  001208  6E29               	movwf	SEND@x+1,c
   937  00120A  EC90  F009         	call	_SEND	;wreg free
   938                           
   939                           ;Var_Fun.c: 55: }
   940  00120E  D038               	goto	l181
   941  001210                     l167:
   942                           
   943                           ;Var_Fun.c: 56: else if(!PORTBbits.RB3)
   944  001210  B681               	btfsc	3969,3,c	;volatile
   945  001212  D01A               	goto	l172
   946                           
   947                           ;Var_Fun.c: 57: {
   948                           ;Var_Fun.c: 58: _delay((unsigned long)((10)*(8e6/4000.0)));
   949  001214  0E1A               	movlw	26
   950  001216  6E2D               	movwf	??_Buttons& (0+255),c
   951  001218  0EF8               	movlw	248
   952  00121A                     u787:
   953  00121A  2EE8               	decfsz	wreg,f,c
   954  00121C  D7FE               	goto	u787
   955  00121E  2E2D               	decfsz	??_Buttons& (0+255),f,c
   956  001220  D7FC               	goto	u787
   957  001222  D000               	nop2	
   958                           
   959                           ;Var_Fun.c: 59: while(!PORTBbits.RB3);
   960  001224  D000               	goto	l173
   961  001226                     l173:
   962  001226  A681               	btfss	3969,3,c	;volatile
   963  001228  D7FE               	goto	l173
   964                           
   965                           ;Var_Fun.c: 60: _delay((unsigned long)((10)*(8e6/4000.0)));
   966  00122A  0E1A               	movlw	26
   967  00122C  6E2D               	movwf	??_Buttons& (0+255),c
   968  00122E  0EF8               	movlw	248
   969  001230                     u797:
   970  001230  2EE8               	decfsz	wreg,f,c
   971  001232  D7FE               	goto	u797
   972  001234  2E2D               	decfsz	??_Buttons& (0+255),f,c
   973  001236  D7FC               	goto	u797
   974  001238  D000               	nop2	
   975                           
   976                           ;Var_Fun.c: 61: SEND("Dir=l\r");
   977  00123A  0E1A               	movlw	low STR_5
   978  00123C  6E28               	movwf	SEND@x,c
   979  00123E  0E10               	movlw	high STR_5
   980  001240  6E29               	movwf	SEND@x+1,c
   981  001242  EC90  F009         	call	_SEND	;wreg free
   982                           
   983                           ;Var_Fun.c: 62: }
   984  001246  D01C               	goto	l181
   985  001248                     l172:
   986                           
   987                           ;Var_Fun.c: 63: else if(!PORTBbits.RB4)
   988  001248  B881               	btfsc	3969,4,c	;volatile
   989  00124A  D01A               	goto	l181
   990                           
   991                           ;Var_Fun.c: 64: {
   992                           ;Var_Fun.c: 65: _delay((unsigned long)((10)*(8e6/4000.0)));
   993  00124C  0E1A               	movlw	26
   994  00124E  6E2D               	movwf	??_Buttons& (0+255),c
   995  001250  0EF8               	movlw	248
   996  001252                     u807:
   997  001252  2EE8               	decfsz	wreg,f,c
   998  001254  D7FE               	goto	u807
   999  001256  2E2D               	decfsz	??_Buttons& (0+255),f,c
  1000  001258  D7FC               	goto	u807
  1001  00125A  D000               	nop2	
  1002                           
  1003                           ;Var_Fun.c: 66: while(!PORTBbits.RB4);
  1004  00125C  D000               	goto	l178
  1005  00125E                     l178:
  1006  00125E  A881               	btfss	3969,4,c	;volatile
  1007  001260  D7FE               	goto	l178
  1008                           
  1009                           ;Var_Fun.c: 67: _delay((unsigned long)((10)*(8e6/4000.0)));
  1010  001262  0E1A               	movlw	26
  1011  001264  6E2D               	movwf	??_Buttons& (0+255),c
  1012  001266  0EF8               	movlw	248
  1013  001268                     u817:
  1014  001268  2EE8               	decfsz	wreg,f,c
  1015  00126A  D7FE               	goto	u817
  1016  00126C  2E2D               	decfsz	??_Buttons& (0+255),f,c
  1017  00126E  D7FC               	goto	u817
  1018  001270  D000               	nop2	
  1019                           
  1020                           ;Var_Fun.c: 68: SEND(txt);
  1021  001272  0E2E               	movlw	low _txt
  1022  001274  6E28               	movwf	SEND@x,c
  1023  001276  0E00               	movlw	high _txt
  1024  001278  6E29               	movwf	SEND@x+1,c
  1025  00127A  EC90  F009         	call	_SEND	;wreg free
  1026  00127E  D000               	goto	l181
  1027  001280                     l181:
  1028  001280  0012               	return		;funcret
  1029  001282                     __end_of_Buttons:
  1030                           	opt stack 0
  1031                           tblptru	equ	0xFF8
  1032                           postinc0	equ	0xFEE
  1033                           wreg	equ	0xFE8
  1034                           
  1035 ;; *************** function _SEND *****************
  1036 ;; Defined at:
  1037 ;;		line 14 in file "Var_Fun.c"
  1038 ;; Parameters:    Size  Location     Type
  1039 ;;  x               2   39[COMRAM] PTR unsigned char 
  1040 ;;		 -> STR_5(7), STR_4(7), STR_3(7), STR_2(7), 
  1041 ;;		 -> txt(10), 
  1042 ;; Auto vars:     Size  Location     Type
  1043 ;;  i               1   43[COMRAM] unsigned char 
  1044 ;; Return value:  Size  Location     Type
  1045 ;;		None               void
  1046 ;; Registers used:
  1047 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  1048 ;; Tracked objects:
  1049 ;;		On entry : 0/0
  1050 ;;		On exit  : 0/0
  1051 ;;		Unchanged: 0/0
  1052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1053 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1054 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1055 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1056 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1057 ;;Total ram usage:        5 bytes
  1058 ;; Hardware stack levels used:    1
  1059 ;; Hardware stack levels required when called:    4
  1060 ;; This function calls:
  1061 ;;		Nothing
  1062 ;; This function is called by:
  1063 ;;		_Buttons
  1064 ;; This function uses a non-reentrant model
  1065 ;;
  1066                           
  1067                           	psect	text7
  1068  001320                     __ptext7:
  1069                           	opt stack 0
  1070  001320                     _SEND:
  1071                           	opt stack 25
  1072                           
  1073                           ;Var_Fun.c: 15: char i=0;
  1074                           
  1075                           ;incstack = 0
  1076  001320  0E00               	movlw	0
  1077  001322  6E2C               	movwf	SEND@i,c
  1078                           
  1079                           ;Var_Fun.c: 16: while(x[i])
  1080  001324  D021               	goto	l1118
  1081  001326                     l1114:
  1082                           
  1083                           ;Var_Fun.c: 17: {
  1084                           ;Var_Fun.c: 18: TXREG = x[i];
  1085  001326  502C               	movf	SEND@i,w,c
  1086  001328  0D01               	mullw	1
  1087  00132A  C028  F02A         	movff	SEND@x,??_SEND
  1088  00132E  C029  F02B         	movff	SEND@x+1,??_SEND+1
  1089  001332  50F3               	movf	prodl,w,c
  1090  001334  262A               	addwf	??_SEND,f,c
  1091  001336  50F4               	movf	prodh,w,c
  1092  001338  222B               	addwfc	??_SEND+1,f,c
  1093  00133A  C02A  FFF6         	movff	??_SEND,tblptrl
  1094  00133E  C02B  FFF7         	movff	??_SEND+1,tblptrh
  1095  001342  0E00               	movlw	low (__smallconst shr (0+16))
  1096  001344  6EF8               	movwf	tblptru,c
  1097  001346  0E0F               	movlw	(high __ramtop+-1)
  1098  001348  64F7               	cpfsgt	tblptrh,c
  1099  00134A  D003               	bra	u377
  1100  00134C  0008               	tblrd		*
  1101  00134E  50F5               	movf	tablat,w,c
  1102  001350  D005               	bra	u370
  1103  001352                     u377:
  1104  001352  CFF6 FFE9          	movff	tblptrl,fsr0l
  1105  001356  CFF7 FFEA          	movff	tblptrh,fsr0h
  1106  00135A  50EF               	movf	indf0,w,c
  1107  00135C                     u370:
  1108  00135C  6EAD               	movwf	4013,c	;volatile
  1109                           
  1110                           ;Var_Fun.c: 19: while (!TRMT);
  1111  00135E  D000               	goto	l147
  1112  001360                     l147:
  1113  001360  A2AC               	btfss	4012,1,c	;volatile
  1114  001362  D7FE               	goto	l147
  1115                           
  1116                           ;Var_Fun.c: 20: i++;
  1117  001364  2A2C               	incf	SEND@i,f,c
  1118  001366  D000               	goto	l1118
  1119  001368                     l1118:
  1120  001368  502C               	movf	SEND@i,w,c
  1121  00136A  0D01               	mullw	1
  1122  00136C  C028  F02A         	movff	SEND@x,??_SEND
  1123  001370  C029  F02B         	movff	SEND@x+1,??_SEND+1
  1124  001374  50F3               	movf	prodl,w,c
  1125  001376  262A               	addwf	??_SEND,f,c
  1126  001378  50F4               	movf	prodh,w,c
  1127  00137A  222B               	addwfc	??_SEND+1,f,c
  1128  00137C  C02A  FFF6         	movff	??_SEND,tblptrl
  1129  001380  C02B  FFF7         	movff	??_SEND+1,tblptrh
  1130  001384  0E00               	movlw	low (__smallconst shr (0+16))
  1131  001386  6EF8               	movwf	tblptru,c
  1132  001388  0E0F               	movlw	(high __ramtop+-1)
  1133  00138A  64F7               	cpfsgt	tblptrh,c
  1134  00138C  D003               	bra	u397
  1135  00138E  0008               	tblrd		*
  1136  001390  50F5               	movf	tablat,w,c
  1137  001392  D005               	bra	u390
  1138  001394                     u397:
  1139  001394  CFF6 FFE9          	movff	tblptrl,fsr0l
  1140  001398  CFF7 FFEA          	movff	tblptrh,fsr0h
  1141  00139C  50EF               	movf	indf0,w,c
  1142  00139E                     u390:
  1143  00139E  0900               	iorlw	0
  1144  0013A0  A4D8               	btfss	status,2,c
  1145  0013A2  D7C1               	goto	l1114
  1146  0013A4  0012               	return		;funcret
  1147  0013A6                     __end_of_SEND:
  1148                           	opt stack 0
  1149                           tblptru	equ	0xFF8
  1150                           tblptrh	equ	0xFF7
  1151                           tblptrl	equ	0xFF6
  1152                           tablat	equ	0xFF5
  1153                           prodh	equ	0xFF4
  1154                           prodl	equ	0xFF3
  1155                           indf0	equ	0xFEF
  1156                           postinc0	equ	0xFEE
  1157                           fsr0h	equ	0xFEA
  1158                           fsr0l	equ	0xFE9
  1159                           wreg	equ	0xFE8
  1160                           status	equ	0xFD8
  1161                           
  1162 ;; *************** function _BRG9600 *****************
  1163 ;; Defined at:
  1164 ;;		line 4 in file "Var_Fun.c"
  1165 ;; Parameters:    Size  Location     Type
  1166 ;;		None
  1167 ;; Auto vars:     Size  Location     Type
  1168 ;;		None
  1169 ;; Return value:  Size  Location     Type
  1170 ;;		None               void
  1171 ;; Registers used:
  1172 ;;		wreg, status,2
  1173 ;; Tracked objects:
  1174 ;;		On entry : 0/0
  1175 ;;		On exit  : 0/0
  1176 ;;		Unchanged: 0/0
  1177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1181 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1182 ;;Total ram usage:        0 bytes
  1183 ;; Hardware stack levels used:    1
  1184 ;; Hardware stack levels required when called:    4
  1185 ;; This function calls:
  1186 ;;		Nothing
  1187 ;; This function is called by:
  1188 ;;		_main
  1189 ;; This function uses a non-reentrant model
  1190 ;;
  1191                           
  1192                           	psect	text8
  1193  001636                     __ptext8:
  1194                           	opt stack 0
  1195  001636                     _BRG9600:
  1196                           	opt stack 26
  1197                           
  1198                           ;Var_Fun.c: 6: SPEN = 1;
  1199                           
  1200                           ;incstack = 0
  1201  001636  8EAB               	bsf	4011,7,c	;volatile
  1202                           
  1203                           ;Var_Fun.c: 7: TXEN = 1;
  1204  001638  8AAC               	bsf	4012,5,c	;volatile
  1205                           
  1206                           ;Var_Fun.c: 8: SYNC = 0;
  1207  00163A  98AC               	bcf	4012,4,c	;volatile
  1208                           
  1209                           ;Var_Fun.c: 9: BRGH = 0;
  1210  00163C  94AC               	bcf	4012,2,c	;volatile
  1211                           
  1212                           ;Var_Fun.c: 10: BRG16 = 0;
  1213  00163E  96B8               	bcf	4024,3,c	;volatile
  1214                           
  1215                           ;Var_Fun.c: 11: SPBRG = 12;
  1216  001640  0E0C               	movlw	12
  1217  001642  6EAF               	movwf	4015,c	;volatile
  1218  001644  0012               	return		;funcret
  1219  001646                     __end_of_BRG9600:
  1220                           	opt stack 0
  1221                           tblptru	equ	0xFF8
  1222                           tblptrh	equ	0xFF7
  1223                           tblptrl	equ	0xFF6
  1224                           tablat	equ	0xFF5
  1225                           prodh	equ	0xFF4
  1226                           prodl	equ	0xFF3
  1227                           indf0	equ	0xFEF
  1228                           postinc0	equ	0xFEE
  1229                           fsr0h	equ	0xFEA
  1230                           fsr0l	equ	0xFE9
  1231                           wreg	equ	0xFE8
  1232                           status	equ	0xFD8
  1233                           
  1234 ;; *************** function _AdcIni *****************
  1235 ;; Defined at:
  1236 ;;		line 90 in file "Var_Fun.c"
  1237 ;; Parameters:    Size  Location     Type
  1238 ;;		None
  1239 ;; Auto vars:     Size  Location     Type
  1240 ;;  duty            2   39[COMRAM] int 
  1241 ;; Return value:  Size  Location     Type
  1242 ;;		None               void
  1243 ;; Registers used:
  1244 ;;		wreg, status,2
  1245 ;; Tracked objects:
  1246 ;;		On entry : 0/0
  1247 ;;		On exit  : 0/0
  1248 ;;		Unchanged: 0/0
  1249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1251 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1253 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1254 ;;Total ram usage:        2 bytes
  1255 ;; Hardware stack levels used:    1
  1256 ;; Hardware stack levels required when called:    4
  1257 ;; This function calls:
  1258 ;;		Nothing
  1259 ;; This function is called by:
  1260 ;;		_main
  1261 ;; This function uses a non-reentrant model
  1262 ;;
  1263                           
  1264                           	psect	text9
  1265  001490                     __ptext9:
  1266                           	opt stack 0
  1267  001490                     _AdcIni:
  1268                           	opt stack 26
  1269                           
  1270                           ;Var_Fun.c: 92: int duty = 0;
  1271                           
  1272                           ;incstack = 0
  1273  001490  0E00               	movlw	0
  1274  001492  6E29               	movwf	AdcIni@duty+1,c
  1275  001494  0E00               	movlw	0
  1276  001496  6E28               	movwf	AdcIni@duty,c
  1277                           
  1278                           ;Var_Fun.c: 93: GIE=1;
  1279  001498  8EF2               	bsf	intcon,7,c	;volatile
  1280                           
  1281                           ;Var_Fun.c: 94: PEIE=1;
  1282  00149A  8CF2               	bsf	intcon,6,c	;volatile
  1283                           
  1284                           ;Var_Fun.c: 95: ADIE=1;
  1285  00149C  8C9D               	bsf	3997,6,c	;volatile
  1286                           
  1287                           ;Var_Fun.c: 96: ADIF=0;
  1288  00149E  9C9E               	bcf	3998,6,c	;volatile
  1289                           
  1290                           ;Var_Fun.c: 97: ADCON1bits.PCFG = 0b1110;
  1291  0014A0  50C1               	movf	4033,w,c	;volatile
  1292  0014A2  0BF0               	andlw	-16
  1293  0014A4  090E               	iorlw	14
  1294  0014A6  6EC1               	movwf	4033,c	;volatile
  1295                           
  1296                           ;Var_Fun.c: 98: ADCON0bits.CHS = 0b0000;
  1297  0014A8  94C2               	bcf	4034,2,c	;volatile
  1298  0014AA  96C2               	bcf	4034,3,c	;volatile
  1299  0014AC  98C2               	bcf	4034,4,c	;volatile
  1300  0014AE  9AC2               	bcf	4034,5,c	;volatile
  1301                           
  1302                           ;Var_Fun.c: 99: ADCON1bits.VCFG = 0b00;
  1303  0014B0  0ECF               	movlw	-49
  1304  0014B2  16C1               	andwf	4033,f,c	;volatile
  1305                           
  1306                           ;Var_Fun.c: 100: ADON = 1;
  1307  0014B4  80C2               	bsf	4034,0,c	;volatile
  1308                           
  1309                           ;Var_Fun.c: 101: ADFM = 1;
  1310  0014B6  8EC0               	bsf	4032,7,c	;volatile
  1311                           
  1312                           ;Var_Fun.c: 102: ADCON2bits.ACQT = 0b001;
  1313  0014B8  50C0               	movf	4032,w,c	;volatile
  1314  0014BA  0BC7               	andlw	-57
  1315  0014BC  0908               	iorlw	8
  1316  0014BE  6EC0               	movwf	4032,c	;volatile
  1317                           
  1318                           ;Var_Fun.c: 103: ADCON2bits.ADCS = 0b110;
  1319  0014C0  50C0               	movf	4032,w,c	;volatile
  1320  0014C2  0BF8               	andlw	-8
  1321  0014C4  0906               	iorlw	6
  1322  0014C6  6EC0               	movwf	4032,c	;volatile
  1323                           
  1324                           ;Var_Fun.c: 104: ADCON0bits.GO_DONE=1;
  1325  0014C8  82C2               	bsf	4034,1,c	;volatile
  1326  0014CA  0012               	return		;funcret
  1327  0014CC                     __end_of_AdcIni:
  1328                           	opt stack 0
  1329                           tblptru	equ	0xFF8
  1330                           tblptrh	equ	0xFF7
  1331                           tblptrl	equ	0xFF6
  1332                           tablat	equ	0xFF5
  1333                           prodh	equ	0xFF4
  1334                           prodl	equ	0xFF3
  1335                           intcon	equ	0xFF2
  1336                           indf0	equ	0xFEF
  1337                           postinc0	equ	0xFEE
  1338                           fsr0h	equ	0xFEA
  1339                           fsr0l	equ	0xFE9
  1340                           wreg	equ	0xFE8
  1341                           status	equ	0xFD8
  1342                           
  1343 ;; *************** function _adc *****************
  1344 ;; Defined at:
  1345 ;;		line 26 in file "Transmit.c"
  1346 ;; Parameters:    Size  Location     Type
  1347 ;;		None
  1348 ;; Auto vars:     Size  Location     Type
  1349 ;;		None
  1350 ;; Return value:  Size  Location     Type
  1351 ;;		None               void
  1352 ;; Registers used:
  1353 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1354 ;; Tracked objects:
  1355 ;;		On entry : 0/0
  1356 ;;		On exit  : 0/0
  1357 ;;		Unchanged: 0/0
  1358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1361 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1362 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1363 ;;Total ram usage:       14 bytes
  1364 ;; Hardware stack levels used:    1
  1365 ;; Hardware stack levels required when called:    3
  1366 ;; This function calls:
  1367 ;;		_LCDGoto
  1368 ;;		_sprintf
  1369 ;; This function is called by:
  1370 ;;		Interrupt level 2
  1371 ;; This function uses a non-reentrant model
  1372 ;;
  1373                           
  1374                           	psect	intcode
  1375  000008                     __pintcode:
  1376                           	opt stack 0
  1377  000008                     _adc:
  1378                           	opt stack 24
  1379                           
  1380                           ;incstack = 0
  1381  000008  CFFA F01A          	movff	pclath,??_adc
  1382  00000C  CFFB F01B          	movff	pclatu,??_adc+1
  1383  000010  CFE9 F01C          	movff	fsr0l,??_adc+2
  1384  000014  ED41  F009         	call	int_func,f	;refresh shadow registers
  1385                           pclatu	equ	0xFFB
  1386                           pclath	equ	0xFFA
  1387                           tblptru	equ	0xFF8
  1388                           tblptrh	equ	0xFF7
  1389                           tblptrl	equ	0xFF6
  1390                           tablat	equ	0xFF5
  1391                           prodh	equ	0xFF4
  1392                           prodl	equ	0xFF3
  1393                           intcon	equ	0xFF2
  1394                           indf0	equ	0xFEF
  1395                           postinc0	equ	0xFEE
  1396                           fsr0h	equ	0xFEA
  1397                           fsr0l	equ	0xFE9
  1398                           wreg	equ	0xFE8
  1399                           status	equ	0xFD8
  1400                           
  1401                           	psect	intcode_body
  1402  001282                     __pintcode_body:
  1403                           	opt stack 24
  1404  001282                     int_func:
  1405                           	opt stack 24
  1406  001282  0006               	pop		; remove dummy address from shadow register refresh
  1407  001284  CFEA F01D          	movff	fsr0h,??_adc+3
  1408  001288  CFE1 F01E          	movff	fsr1l,??_adc+4
  1409  00128C  CFE2 F01F          	movff	fsr1h,??_adc+5
  1410  001290  CFD9 F020          	movff	fsr2l,??_adc+6
  1411  001294  CFDA F021          	movff	fsr2h,??_adc+7
  1412  001298  CFF3 F022          	movff	prodl,??_adc+8
  1413  00129C  CFF4 F023          	movff	prodh,??_adc+9
  1414  0012A0  CFF6 F024          	movff	tblptrl,??_adc+10
  1415  0012A4  CFF7 F025          	movff	tblptrh,??_adc+11
  1416  0012A8  CFF8 F026          	movff	tblptru,??_adc+12
  1417  0012AC  CFF5 F027          	movff	tablat,??_adc+13
  1418                           
  1419                           ;Transmit.c: 29: if(CCP1IF)
  1420  0012B0  A49E               	btfss	3998,2,c	;volatile
  1421  0012B2  D002               	goto	i2l73
  1422                           
  1423                           ;Transmit.c: 30: {
  1424                           ;Transmit.c: 31: ADCON0bits.GO_DONE=1;
  1425  0012B4  82C2               	bsf	4034,1,c	;volatile
  1426                           
  1427                           ;Transmit.c: 32: CCP1IF=0;
  1428  0012B6  949E               	bcf	3998,2,c	;volatile
  1429  0012B8                     i2l73:
  1430                           
  1431                           ;Transmit.c: 33: }
  1432                           ;Transmit.c: 34: if(ADIF)
  1433  0012B8  AC9E               	btfss	3998,6,c	;volatile
  1434  0012BA  D015               	goto	i2l75
  1435                           
  1436                           ;Transmit.c: 35: {
  1437                           ;Transmit.c: 36: LCDGoto(0,0);
  1438  0012BC  0E00               	movlw	0
  1439  0012BE  6E05               	movwf	LCDGoto@ln,c
  1440  0012C0  0E00               	movlw	0
  1441  0012C2  EC27  F00A         	call	_LCDGoto
  1442                           
  1443                           ;Transmit.c: 41: sprintf(txt,"SPD=%u\r",ADRES);
  1444  0012C6  0E2E               	movlw	low _txt
  1445  0012C8  6E0D               	movwf	sprintf@sp,c
  1446  0012CA  0E00               	movlw	high _txt
  1447  0012CC  6E0E               	movwf	sprintf@sp+1,c
  1448  0012CE  0E0B               	movlw	low STR_1
  1449  0012D0  6E0F               	movwf	sprintf@f,c
  1450  0012D2  0E10               	movlw	high STR_1
  1451  0012D4  6E10               	movwf	sprintf@f+1,c
  1452  0012D6  CFC3 F011          	movff	4035,?_sprintf+4	;volatile
  1453  0012DA  CFC4 F012          	movff	4036,?_sprintf+5	;volatile
  1454  0012DE  EC18  F008         	call	_sprintf	;wreg free
  1455                           
  1456                           ;Transmit.c: 43: ADIF=0;
  1457  0012E2  9C9E               	bcf	3998,6,c	;volatile
  1458  0012E4  D000               	goto	i2l75
  1459  0012E6                     i2l75:
  1460  0012E6  C027  FFF5         	movff	??_adc+13,tablat
  1461  0012EA  C026  FFF8         	movff	??_adc+12,tblptru
  1462  0012EE  C025  FFF7         	movff	??_adc+11,tblptrh
  1463  0012F2  C024  FFF6         	movff	??_adc+10,tblptrl
  1464  0012F6  C023  FFF4         	movff	??_adc+9,prodh
  1465  0012FA  C022  FFF3         	movff	??_adc+8,prodl
  1466  0012FE  C021  FFDA         	movff	??_adc+7,fsr2h
  1467  001302  C020  FFD9         	movff	??_adc+6,fsr2l
  1468  001306  C01F  FFE2         	movff	??_adc+5,fsr1h
  1469  00130A  C01E  FFE1         	movff	??_adc+4,fsr1l
  1470  00130E  C01D  FFEA         	movff	??_adc+3,fsr0h
  1471  001312  C01C  FFE9         	movff	??_adc+2,fsr0l
  1472  001316  C01B  FFFB         	movff	??_adc+1,pclatu
  1473  00131A  C01A  FFFA         	movff	??_adc,pclath
  1474  00131E  0011               	retfie		f
  1475  001320                     __end_of_adc:
  1476                           	opt stack 0
  1477                           pclatu	equ	0xFFB
  1478                           pclath	equ	0xFFA
  1479                           tblptru	equ	0xFF8
  1480                           tblptrh	equ	0xFF7
  1481                           tblptrl	equ	0xFF6
  1482                           tablat	equ	0xFF5
  1483                           prodh	equ	0xFF4
  1484                           prodl	equ	0xFF3
  1485                           intcon	equ	0xFF2
  1486                           indf0	equ	0xFEF
  1487                           postinc0	equ	0xFEE
  1488                           fsr0h	equ	0xFEA
  1489                           fsr0l	equ	0xFE9
  1490                           wreg	equ	0xFE8
  1491                           fsr1h	equ	0xFE2
  1492                           fsr1l	equ	0xFE1
  1493                           fsr2h	equ	0xFDA
  1494                           fsr2l	equ	0xFD9
  1495                           status	equ	0xFD8
  1496                           
  1497 ;; *************** function _sprintf *****************
  1498 ;; Defined at:
  1499 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  1500 ;; Parameters:    Size  Location     Type
  1501 ;;  sp              2   12[COMRAM] PTR unsigned char 
  1502 ;;		 -> txt(10), 
  1503 ;;  f               2   14[COMRAM] PTR const unsigned char 
  1504 ;;		 -> STR_1(8), 
  1505 ;; Auto vars:     Size  Location     Type
  1506 ;;  tmpval          4    0        struct .
  1507 ;;  cp              3    0        PTR const unsigned char 
  1508 ;;  val             2   21[COMRAM] unsigned int 
  1509 ;;  ap              2   19[COMRAM] PTR void [1]
  1510 ;;		 -> ?_sprintf(2), 
  1511 ;;  len             2    0        unsigned int 
  1512 ;;  c               1   24[COMRAM] char 
  1513 ;;  prec            1   23[COMRAM] char 
  1514 ;;  flag            1   18[COMRAM] unsigned char 
  1515 ;; Return value:  Size  Location     Type
  1516 ;;                  2   12[COMRAM] int 
  1517 ;; Registers used:
  1518 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1519 ;; Tracked objects:
  1520 ;;		On entry : 0/0
  1521 ;;		On exit  : 0/0
  1522 ;;		Unchanged: 0/0
  1523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1524 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1525 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1527 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1528 ;;Total ram usage:       13 bytes
  1529 ;; Hardware stack levels used:    1
  1530 ;; Hardware stack levels required when called:    1
  1531 ;; This function calls:
  1532 ;;		___lwdiv
  1533 ;;		___lwmod
  1534 ;; This function is called by:
  1535 ;;		_adc
  1536 ;; This function uses a non-reentrant model
  1537 ;;
  1538                           
  1539                           	psect	text11
  1540  001030                     __ptext11:
  1541                           	opt stack 0
  1542  001030                     _sprintf:
  1543                           	opt stack 25
  1544                           
  1545                           ;doprnt.c: 494: va_list ap;
  1546                           ;doprnt.c: 499: signed char c;
  1547                           ;doprnt.c: 506: signed char prec;
  1548                           ;doprnt.c: 508: unsigned char flag;
  1549                           ;doprnt.c: 523: union {
  1550                           ;doprnt.c: 524: unsigned long vd;
  1551                           ;doprnt.c: 525: double integ;
  1552                           ;doprnt.c: 526: } tmpval;
  1553                           ;doprnt.c: 528: unsigned int val;
  1554                           ;doprnt.c: 529: unsigned len;
  1555                           ;doprnt.c: 530: const char * cp;
  1556                           ;doprnt.c: 533: *ap = __va_start();
  1557                           
  1558                           ;incstack = 0
  1559  001030  0E11               	movlw	low (?_sprintf+4)
  1560  001032  6E14               	movwf	sprintf@ap,c
  1561  001034  0E00               	movlw	high (?_sprintf+4)
  1562  001036  6E15               	movwf	sprintf@ap+1,c
  1563                           
  1564                           ;doprnt.c: 536: while(c = *f++) {
  1565  001038  D081               	goto	i2l1280
  1566  00103A                     i2l1240:
  1567                           
  1568                           ;doprnt.c: 538: if(c != '%')
  1569  00103A  0E25               	movlw	37
  1570  00103C  1819               	xorwf	sprintf@c,w,c
  1571  00103E  B4D8               	btfsc	status,2,c
  1572  001040  D009               	goto	i2l1246
  1573                           
  1574                           ;doprnt.c: 540: {
  1575                           ;doprnt.c: 541: ((*sp++ = (c)));
  1576  001042  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1577  001046  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1578  00104A  C019  FFDF         	movff	sprintf@c,indf2
  1579  00104E  4A0D               	infsnz	sprintf@sp,f,c
  1580  001050  2A0E               	incf	sprintf@sp+1,f,c
  1581                           
  1582                           ;doprnt.c: 542: continue;
  1583  001052  D074               	goto	i2l1280
  1584  001054                     i2l1246:
  1585                           
  1586                           ;doprnt.c: 543: }
  1587                           ;doprnt.c: 548: flag = 0;
  1588  001054  0E00               	movlw	0
  1589  001056  6E13               	movwf	sprintf@flag,c
  1590                           
  1591                           ;doprnt.c: 635: switch(c = *f++) {
  1592  001058  D005               	goto	i2l1252
  1593                           
  1594                           ;doprnt.c: 638: goto alldone;
  1595                           
  1596                           ;doprnt.c: 637: case 0:
  1597  00105A  D07E               	goto	i2l1282
  1598                           
  1599                           ;doprnt.c: 813: continue;
  1600                           
  1601                           ;doprnt.c: 802: default:
  1602  00105C  D06F               	goto	i2l1280
  1603  00105E                     i2l1248:
  1604                           
  1605                           ;doprnt.c: 818: flag |= 0xC0;
  1606  00105E  0EC0               	movlw	192
  1607  001060  1213               	iorwf	sprintf@flag,f,c
  1608                           
  1609                           ;doprnt.c: 822: }
  1610                           
  1611                           ;doprnt.c: 819: break;
  1612  001062  D011               	goto	i2l1254
  1613  001064                     i2l1252:
  1614  001064  C00F  FFF6         	movff	sprintf@f,tblptrl
  1615  001068  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1616  00106C  4A0F               	infsnz	sprintf@f,f,c
  1617  00106E  2A10               	incf	sprintf@f+1,f,c
  1618  001070                     	if	0	;tblptru may be non-zero
  1619  001070                     	endif
  1620  001070                     	if	0	;tblptru may be non-zero
  1621  001070                     	endif
  1622  001070  0008               	tblrd		*
  1623  001072  CFF5 F019          	movff	tablat,sprintf@c
  1624  001076  5019               	movf	sprintf@c,w,c
  1625                           
  1626                           ; Switch size 1, requested type "space"
  1627                           ; Number of cases is 2, Range of values is 0 to 117
  1628                           ; switch strategies available:
  1629                           ; Name         Instructions Cycles
  1630                           ; simple_byte            7     4 (average)
  1631                           ;	Chosen strategy is simple_byte
  1632  001078  0A00               	xorlw	0	; case 0
  1633  00107A  B4D8               	btfsc	status,2,c
  1634  00107C  D06D               	goto	i2l1282
  1635  00107E  0A75               	xorlw	117	; case 117
  1636  001080  B4D8               	btfsc	status,2,c
  1637  001082  D7ED               	goto	i2l1248
  1638  001084  D05B               	goto	i2l1280
  1639  001086                     i2l1254:
  1640                           
  1641                           ;doprnt.c: 1273: {
  1642                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1643  001086  C014  FFD9         	movff	sprintf@ap,fsr2l
  1644  00108A  C015  FFDA         	movff	sprintf@ap+1,fsr2h
  1645  00108E  CFDE F016          	movff	postinc2,sprintf@val
  1646  001092  CFDD F017          	movff	postdec2,sprintf@val+1
  1647  001096  0E02               	movlw	2
  1648  001098  2614               	addwf	sprintf@ap,f,c
  1649  00109A  0E00               	movlw	0
  1650  00109C  2215               	addwfc	sprintf@ap+1,f,c
  1651                           
  1652                           ;doprnt.c: 1287: }
  1653                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1654  00109E  0E01               	movlw	1
  1655  0010A0  6E19               	movwf	sprintf@c,c
  1656  0010A2                     i2l1260:
  1657  0010A2  0E05               	movlw	5
  1658  0010A4  1819               	xorwf	sprintf@c,w,c
  1659  0010A6  B4D8               	btfsc	status,2,c
  1660  0010A8  D016               	goto	i2l206
  1661  0010AA  D001               	goto	i2l1264
  1662  0010AC  D014               	goto	i2l206
  1663  0010AE                     i2l1264:
  1664                           
  1665                           ;doprnt.c: 1306: if(val < dpowers[c])
  1666  0010AE  5019               	movf	sprintf@c,w,c
  1667  0010B0  0D02               	mullw	2
  1668  0010B2  0E01               	movlw	low _dpowers
  1669  0010B4  24F3               	addwf	prodl,w,c
  1670  0010B6  6EF6               	movwf	tblptrl,c
  1671  0010B8  0E10               	movlw	high _dpowers
  1672  0010BA  20F4               	addwfc	prodh,w,c
  1673  0010BC  6EF7               	movwf	tblptrh,c
  1674  0010BE                     	if	0	;There are less than 3 active tblptr bytes
  1675  0010BE                     	endif
  1676  0010BE  0009               	tblrd		*+
  1677  0010C0  50F5               	movf	tablat,w,c
  1678  0010C2  5C16               	subwf	sprintf@val,w,c
  1679  0010C4  0009               	tblrd		*+
  1680  0010C6  50F5               	movf	tablat,w,c
  1681  0010C8  5817               	subwfb	sprintf@val+1,w,c
  1682  0010CA  A0D8               	btfss	status,0,c
  1683  0010CC  D004               	goto	i2l206
  1684  0010CE  D001               	goto	i2l1268
  1685                           
  1686                           ;doprnt.c: 1307: break;
  1687  0010D0  D002               	goto	i2l206
  1688  0010D2                     i2l1268:
  1689  0010D2  2A19               	incf	sprintf@c,f,c
  1690  0010D4  D7E6               	goto	i2l1260
  1691  0010D6                     i2l206:
  1692                           
  1693                           ;doprnt.c: 1422: {
  1694                           ;doprnt.c: 1469: }
  1695                           ;doprnt.c: 1472: prec = c;
  1696  0010D6  C019  F018         	movff	sprintf@c,sprintf@prec
  1697                           
  1698                           ;doprnt.c: 1474: while(prec--) {
  1699  0010DA  D02A               	goto	i2l1278
  1700  0010DC                     i2l1272:
  1701                           
  1702                           ;doprnt.c: 1478: {
  1703                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1704  0010DC  5018               	movf	sprintf@prec,w,c
  1705  0010DE  0D02               	mullw	2
  1706  0010E0  0E01               	movlw	low _dpowers
  1707  0010E2  24F3               	addwf	prodl,w,c
  1708  0010E4  6EF6               	movwf	tblptrl,c
  1709  0010E6  0E10               	movlw	high _dpowers
  1710  0010E8  20F4               	addwfc	prodh,w,c
  1711  0010EA  6EF7               	movwf	tblptrh,c
  1712  0010EC                     	if	0	;There are less than 3 active tblptr bytes
  1713  0010EC                     	endif
  1714  0010EC  0009               	tblrd		*+
  1715  0010EE  CFF5 F003          	movff	tablat,___lwdiv@divisor
  1716  0010F2  000A               	tblrd		*-
  1717  0010F4  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  1718  0010F8  C016  F001         	movff	sprintf@val,___lwdiv@dividend
  1719  0010FC  C017  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  1720  001100  ECD3  F009         	call	___lwdiv	;wreg free
  1721  001104  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  1722  001108  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  1723  00110C  0E00               	movlw	0
  1724  00110E  6E0B               	movwf	___lwmod@divisor+1,c
  1725  001110  0E0A               	movlw	10
  1726  001112  6E0A               	movwf	___lwmod@divisor,c
  1727  001114  EC01  F00A         	call	___lwmod	;wreg free
  1728  001118  5008               	movf	?___lwmod,w,c
  1729  00111A  0F30               	addlw	48
  1730  00111C  6E19               	movwf	sprintf@c,c
  1731                           
  1732                           ;doprnt.c: 1523: }
  1733                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1734  00111E  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1735  001122  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1736  001126  C019  FFDF         	movff	sprintf@c,indf2
  1737  00112A  4A0D               	infsnz	sprintf@sp,f,c
  1738  00112C  2A0E               	incf	sprintf@sp+1,f,c
  1739  00112E  D000               	goto	i2l1278
  1740  001130                     i2l1278:
  1741  001130  0618               	decf	sprintf@prec,f,c
  1742  001132  2818               	incf	sprintf@prec,w,c
  1743  001134  B4D8               	btfsc	status,2,c
  1744  001136  D002               	goto	i2l1280
  1745  001138  D7D1               	goto	i2l1272
  1746  00113A  D000               	goto	i2l1280
  1747  00113C                     i2l1280:
  1748  00113C  C00F  FFF6         	movff	sprintf@f,tblptrl
  1749  001140  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1750  001144  4A0F               	infsnz	sprintf@f,f,c
  1751  001146  2A10               	incf	sprintf@f+1,f,c
  1752  001148                     	if	0	;tblptru may be non-zero
  1753  001148                     	endif
  1754  001148                     	if	0	;tblptru may be non-zero
  1755  001148                     	endif
  1756  001148  0008               	tblrd		*
  1757  00114A  CFF5 F019          	movff	tablat,sprintf@c
  1758  00114E  5019               	movf	sprintf@c,w,c
  1759  001150  B4D8               	btfsc	status,2,c
  1760  001152  D002               	goto	i2l1282
  1761  001154  D772               	goto	i2l1240
  1762  001156  D000               	goto	i2l1282
  1763  001158                     i2l1282:
  1764                           
  1765                           ;doprnt.c: 1538: *sp = 0;
  1766  001158  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1767  00115C  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1768  001160  0E00               	movlw	0
  1769  001162  6EDF               	movwf	indf2,c
  1770  001164  D000               	goto	i2l212
  1771  001166                     i2l212:
  1772  001166  0012               	return		;funcret
  1773  001168                     __end_of_sprintf:
  1774                           	opt stack 0
  1775                           pclatu	equ	0xFFB
  1776                           pclath	equ	0xFFA
  1777                           tblptru	equ	0xFF8
  1778                           tblptrh	equ	0xFF7
  1779                           tblptrl	equ	0xFF6
  1780                           tablat	equ	0xFF5
  1781                           prodh	equ	0xFF4
  1782                           prodl	equ	0xFF3
  1783                           intcon	equ	0xFF2
  1784                           indf0	equ	0xFEF
  1785                           postinc0	equ	0xFEE
  1786                           fsr0h	equ	0xFEA
  1787                           fsr0l	equ	0xFE9
  1788                           wreg	equ	0xFE8
  1789                           fsr1h	equ	0xFE2
  1790                           fsr1l	equ	0xFE1
  1791                           indf2	equ	0xFDF
  1792                           postinc2	equ	0xFDE
  1793                           postdec2	equ	0xFDD
  1794                           fsr2h	equ	0xFDA
  1795                           fsr2l	equ	0xFD9
  1796                           status	equ	0xFD8
  1797                           
  1798 ;; *************** function ___lwmod *****************
  1799 ;; Defined at:
  1800 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  1801 ;; Parameters:    Size  Location     Type
  1802 ;;  dividend        2    7[COMRAM] unsigned int 
  1803 ;;  divisor         2    9[COMRAM] unsigned int 
  1804 ;; Auto vars:     Size  Location     Type
  1805 ;;  counter         1   11[COMRAM] unsigned char 
  1806 ;; Return value:  Size  Location     Type
  1807 ;;                  2    7[COMRAM] unsigned int 
  1808 ;; Registers used:
  1809 ;;		wreg, status,2, status,0
  1810 ;; Tracked objects:
  1811 ;;		On entry : 0/0
  1812 ;;		On exit  : 0/0
  1813 ;;		Unchanged: 0/0
  1814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1815 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1816 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1818 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1819 ;;Total ram usage:        5 bytes
  1820 ;; Hardware stack levels used:    1
  1821 ;; This function calls:
  1822 ;;		Nothing
  1823 ;; This function is called by:
  1824 ;;		_sprintf
  1825 ;; This function uses a non-reentrant model
  1826 ;;
  1827                           
  1828                           	psect	text12
  1829  001402                     __ptext12:
  1830                           	opt stack 0
  1831  001402                     ___lwmod:
  1832                           	opt stack 25
  1833                           
  1834                           ;incstack = 0
  1835  001402  500A               	movf	___lwmod@divisor,w,c
  1836  001404  100B               	iorwf	___lwmod@divisor+1,w,c
  1837  001406  B4D8               	btfsc	status,2,c
  1838  001408  D01D               	goto	i2l743
  1839  00140A  0E01               	movlw	1
  1840  00140C  6E0C               	movwf	___lwmod@counter,c
  1841  00140E  D005               	goto	i2l1148
  1842  001410                     i2l1146:
  1843  001410  90D8               	bcf	status,0,c
  1844  001412  360A               	rlcf	___lwmod@divisor,f,c
  1845  001414  360B               	rlcf	___lwmod@divisor+1,f,c
  1846  001416  2A0C               	incf	___lwmod@counter,f,c
  1847  001418  D000               	goto	i2l1148
  1848  00141A                     i2l1148:
  1849  00141A  BE0B               	btfsc	___lwmod@divisor+1,7,c
  1850  00141C  D002               	goto	i2l1150
  1851  00141E  D7F8               	goto	i2l1146
  1852  001420  D000               	goto	i2l1150
  1853  001422                     i2l1150:
  1854  001422  500A               	movf	___lwmod@divisor,w,c
  1855  001424  5C08               	subwf	___lwmod@dividend,w,c
  1856  001426  500B               	movf	___lwmod@divisor+1,w,c
  1857  001428  5809               	subwfb	___lwmod@dividend+1,w,c
  1858  00142A  A0D8               	btfss	status,0,c
  1859  00142C  D005               	goto	i2l1154
  1860  00142E  500A               	movf	___lwmod@divisor,w,c
  1861  001430  5E08               	subwf	___lwmod@dividend,f,c
  1862  001432  500B               	movf	___lwmod@divisor+1,w,c
  1863  001434  5A09               	subwfb	___lwmod@dividend+1,f,c
  1864  001436  D000               	goto	i2l1154
  1865  001438                     i2l1154:
  1866  001438  90D8               	bcf	status,0,c
  1867  00143A  320B               	rrcf	___lwmod@divisor+1,f,c
  1868  00143C  320A               	rrcf	___lwmod@divisor,f,c
  1869  00143E  2E0C               	decfsz	___lwmod@counter,f,c
  1870  001440  D7F0               	goto	i2l1150
  1871  001442  D000               	goto	i2l743
  1872  001444                     i2l743:
  1873  001444  C008  F008         	movff	___lwmod@dividend,?___lwmod
  1874  001448  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  1875  00144C  0012               	return		;funcret
  1876  00144E                     __end_of___lwmod:
  1877                           	opt stack 0
  1878                           pclatu	equ	0xFFB
  1879                           pclath	equ	0xFFA
  1880                           tblptru	equ	0xFF8
  1881                           tblptrh	equ	0xFF7
  1882                           tblptrl	equ	0xFF6
  1883                           tablat	equ	0xFF5
  1884                           prodh	equ	0xFF4
  1885                           prodl	equ	0xFF3
  1886                           intcon	equ	0xFF2
  1887                           indf0	equ	0xFEF
  1888                           postinc0	equ	0xFEE
  1889                           fsr0h	equ	0xFEA
  1890                           fsr0l	equ	0xFE9
  1891                           wreg	equ	0xFE8
  1892                           fsr1h	equ	0xFE2
  1893                           fsr1l	equ	0xFE1
  1894                           indf2	equ	0xFDF
  1895                           postinc2	equ	0xFDE
  1896                           postdec2	equ	0xFDD
  1897                           fsr2h	equ	0xFDA
  1898                           fsr2l	equ	0xFD9
  1899                           status	equ	0xFD8
  1900                           
  1901 ;; *************** function ___lwdiv *****************
  1902 ;; Defined at:
  1903 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  1904 ;; Parameters:    Size  Location     Type
  1905 ;;  dividend        2    0[COMRAM] unsigned int 
  1906 ;;  divisor         2    2[COMRAM] unsigned int 
  1907 ;; Auto vars:     Size  Location     Type
  1908 ;;  quotient        2    4[COMRAM] unsigned int 
  1909 ;;  counter         1    6[COMRAM] unsigned char 
  1910 ;; Return value:  Size  Location     Type
  1911 ;;                  2    0[COMRAM] unsigned int 
  1912 ;; Registers used:
  1913 ;;		wreg, status,2, status,0
  1914 ;; Tracked objects:
  1915 ;;		On entry : 0/0
  1916 ;;		On exit  : 0/0
  1917 ;;		Unchanged: 0/0
  1918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1919 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1920 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1922 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1923 ;;Total ram usage:        7 bytes
  1924 ;; Hardware stack levels used:    1
  1925 ;; This function calls:
  1926 ;;		Nothing
  1927 ;; This function is called by:
  1928 ;;		_sprintf
  1929 ;; This function uses a non-reentrant model
  1930 ;;
  1931                           
  1932                           	psect	text13
  1933  0013A6                     __ptext13:
  1934                           	opt stack 0
  1935  0013A6                     ___lwdiv:
  1936                           	opt stack 25
  1937                           
  1938                           ;incstack = 0
  1939  0013A6  0E00               	movlw	0
  1940  0013A8  6E06               	movwf	___lwdiv@quotient+1,c
  1941  0013AA  0E00               	movlw	0
  1942  0013AC  6E05               	movwf	___lwdiv@quotient,c
  1943  0013AE  5003               	movf	___lwdiv@divisor,w,c
  1944  0013B0  1004               	iorwf	___lwdiv@divisor+1,w,c
  1945  0013B2  B4D8               	btfsc	status,2,c
  1946  0013B4  D021               	goto	i2l733
  1947  0013B6  0E01               	movlw	1
  1948  0013B8  6E07               	movwf	___lwdiv@counter,c
  1949  0013BA  D005               	goto	i2l1128
  1950  0013BC                     i2l1126:
  1951  0013BC  90D8               	bcf	status,0,c
  1952  0013BE  3603               	rlcf	___lwdiv@divisor,f,c
  1953  0013C0  3604               	rlcf	___lwdiv@divisor+1,f,c
  1954  0013C2  2A07               	incf	___lwdiv@counter,f,c
  1955  0013C4  D000               	goto	i2l1128
  1956  0013C6                     i2l1128:
  1957  0013C6  BE04               	btfsc	___lwdiv@divisor+1,7,c
  1958  0013C8  D002               	goto	i2l1130
  1959  0013CA  D7F8               	goto	i2l1126
  1960  0013CC  D000               	goto	i2l1130
  1961  0013CE                     i2l1130:
  1962  0013CE  90D8               	bcf	status,0,c
  1963  0013D0  3605               	rlcf	___lwdiv@quotient,f,c
  1964  0013D2  3606               	rlcf	___lwdiv@quotient+1,f,c
  1965  0013D4  5003               	movf	___lwdiv@divisor,w,c
  1966  0013D6  5C01               	subwf	___lwdiv@dividend,w,c
  1967  0013D8  5004               	movf	___lwdiv@divisor+1,w,c
  1968  0013DA  5802               	subwfb	___lwdiv@dividend+1,w,c
  1969  0013DC  A0D8               	btfss	status,0,c
  1970  0013DE  D006               	goto	i2l1138
  1971  0013E0  5003               	movf	___lwdiv@divisor,w,c
  1972  0013E2  5E01               	subwf	___lwdiv@dividend,f,c
  1973  0013E4  5004               	movf	___lwdiv@divisor+1,w,c
  1974  0013E6  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1975  0013E8  8005               	bsf	___lwdiv@quotient,0,c
  1976  0013EA  D000               	goto	i2l1138
  1977  0013EC                     i2l1138:
  1978  0013EC  90D8               	bcf	status,0,c
  1979  0013EE  3204               	rrcf	___lwdiv@divisor+1,f,c
  1980  0013F0  3203               	rrcf	___lwdiv@divisor,f,c
  1981  0013F2  2E07               	decfsz	___lwdiv@counter,f,c
  1982  0013F4  D7EC               	goto	i2l1130
  1983  0013F6  D000               	goto	i2l733
  1984  0013F8                     i2l733:
  1985  0013F8  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1986  0013FC  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1987  001400  0012               	return		;funcret
  1988  001402                     __end_of___lwdiv:
  1989                           	opt stack 0
  1990                           pclatu	equ	0xFFB
  1991                           pclath	equ	0xFFA
  1992                           tblptru	equ	0xFF8
  1993                           tblptrh	equ	0xFF7
  1994                           tblptrl	equ	0xFF6
  1995                           tablat	equ	0xFF5
  1996                           prodh	equ	0xFF4
  1997                           prodl	equ	0xFF3
  1998                           intcon	equ	0xFF2
  1999                           indf0	equ	0xFEF
  2000                           postinc0	equ	0xFEE
  2001                           fsr0h	equ	0xFEA
  2002                           fsr0l	equ	0xFE9
  2003                           wreg	equ	0xFE8
  2004                           fsr1h	equ	0xFE2
  2005                           fsr1l	equ	0xFE1
  2006                           indf2	equ	0xFDF
  2007                           postinc2	equ	0xFDE
  2008                           postdec2	equ	0xFDD
  2009                           fsr2h	equ	0xFDA
  2010                           fsr2l	equ	0xFD9
  2011                           status	equ	0xFD8
  2012                           
  2013 ;; *************** function _LCDGoto *****************
  2014 ;; Defined at:
  2015 ;;		line 148 in file "lcd.c"
  2016 ;; Parameters:    Size  Location     Type
  2017 ;;  pos             1    wreg     unsigned char 
  2018 ;;  ln              1    4[COMRAM] unsigned char 
  2019 ;; Auto vars:     Size  Location     Type
  2020 ;;  pos             1    9[COMRAM] unsigned char 
  2021 ;; Return value:  Size  Location     Type
  2022 ;;		None               void
  2023 ;; Registers used:
  2024 ;;		wreg, status,2, status,0, cstack
  2025 ;; Tracked objects:
  2026 ;;		On entry : 0/0
  2027 ;;		On exit  : 0/0
  2028 ;;		Unchanged: 0/0
  2029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2030 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2031 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2032 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2033 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2034 ;;Total ram usage:        6 bytes
  2035 ;; Hardware stack levels used:    1
  2036 ;; Hardware stack levels required when called:    2
  2037 ;; This function calls:
  2038 ;;		i2_LCDPutCmd
  2039 ;; This function is called by:
  2040 ;;		_adc
  2041 ;; This function uses a non-reentrant model
  2042 ;;
  2043                           
  2044                           	psect	text14
  2045  00144E                     __ptext14:
  2046                           	opt stack 0
  2047  00144E                     _LCDGoto:
  2048                           	opt stack 24
  2049                           
  2050                           ;incstack = 0
  2051                           ;LCDGoto@pos stored from wreg
  2052  00144E  6E0A               	movwf	LCDGoto@pos,c
  2053                           
  2054                           ;lcd.c: 151: if ((ln > (2-1)) || (pos > (16-1)))
  2055  001450  0E02               	movlw	2
  2056  001452  6005               	cpfslt	LCDGoto@ln,c
  2057  001454  D01C               	goto	i2l34
  2058  001456  0E0F               	movlw	15
  2059  001458  640A               	cpfsgt	LCDGoto@pos,c
  2060  00145A  D001               	goto	i2l1196
  2061                           
  2062                           ;lcd.c: 152: {
  2063                           ;lcd.c: 154: return;
  2064  00145C  D018               	goto	i2l34
  2065  00145E                     i2l1196:
  2066                           
  2067                           ;lcd.c: 155: }
  2068                           ;lcd.c: 158: LCDPutCmd((ln == 1) ? (0xC0 | pos) : (0x80 | pos));
  2069  00145E  0405               	decf	LCDGoto@ln,w,c
  2070  001460  B4D8               	btfsc	status,2,c
  2071  001462  D002               	goto	i2l1200
  2072  001464  0E80               	movlw	128
  2073  001466  D001               	goto	L1
  2074  001468                     i2l1200:
  2075  001468  0EC0               	movlw	192
  2076  00146A                     L1:
  2077  00146A  C00A  F006         	movff	LCDGoto@pos,??_LCDGoto
  2078  00146E  6A07               	clrf	(??_LCDGoto+1)& (0+255),c
  2079  001470  1006               	iorwf	??_LCDGoto,w,c
  2080  001472  6E08               	movwf	_LCDGoto$116,c
  2081  001474  5007               	movf	??_LCDGoto+1,w,c
  2082  001476  6E09               	movwf	_LCDGoto$116+1,c
  2083  001478  D000               	goto	i2l1202
  2084  00147A                     i2l1202:
  2085  00147A  5008               	movf	_LCDGoto$116,w,c
  2086  00147C  ECA0  F00A         	call	i2_LCDPutCmd
  2087                           
  2088                           ;lcd.c: 161: _delay((unsigned long)((5)*(8e6/4000.0)));
  2089  001480  0E0D               	movlw	13
  2090  001482  6E06               	movwf	??_LCDGoto& (0+255),c
  2091  001484  0EFC               	movlw	252
  2092  001486                     i2u82_47:
  2093  001486  2EE8               	decfsz	wreg,f,c
  2094  001488  D7FE               	goto	i2u82_47
  2095  00148A  2E06               	decfsz	??_LCDGoto& (0+255),f,c
  2096  00148C  D7FC               	goto	i2u82_47
  2097  00148E                     i2l34:
  2098  00148E  0012               	return		;funcret
  2099  001490                     __end_of_LCDGoto:
  2100                           	opt stack 0
  2101                           pclatu	equ	0xFFB
  2102                           pclath	equ	0xFFA
  2103                           tblptru	equ	0xFF8
  2104                           tblptrh	equ	0xFF7
  2105                           tblptrl	equ	0xFF6
  2106                           tablat	equ	0xFF5
  2107                           prodh	equ	0xFF4
  2108                           prodl	equ	0xFF3
  2109                           intcon	equ	0xFF2
  2110                           indf0	equ	0xFEF
  2111                           postinc0	equ	0xFEE
  2112                           fsr0h	equ	0xFEA
  2113                           fsr0l	equ	0xFE9
  2114                           wreg	equ	0xFE8
  2115                           fsr1h	equ	0xFE2
  2116                           fsr1l	equ	0xFE1
  2117                           indf2	equ	0xFDF
  2118                           postinc2	equ	0xFDE
  2119                           postdec2	equ	0xFDD
  2120                           fsr2h	equ	0xFDA
  2121                           fsr2l	equ	0xFD9
  2122                           status	equ	0xFD8
  2123                           
  2124 ;; *************** function i2_LCDPutCmd *****************
  2125 ;; Defined at:
  2126 ;;		line 118 in file "lcd.c"
  2127 ;; Parameters:    Size  Location     Type
  2128 ;;  ch              1    wreg     unsigned char 
  2129 ;; Auto vars:     Size  Location     Type
  2130 ;;  ch              1    3[COMRAM] unsigned char 
  2131 ;; Return value:  Size  Location     Type
  2132 ;;		None               void
  2133 ;; Registers used:
  2134 ;;		wreg, status,2, status,0, cstack
  2135 ;; Tracked objects:
  2136 ;;		On entry : 0/0
  2137 ;;		On exit  : 0/0
  2138 ;;		Unchanged: 0/0
  2139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2141 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2142 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2143 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2144 ;;Total ram usage:        2 bytes
  2145 ;; Hardware stack levels used:    1
  2146 ;; Hardware stack levels required when called:    1
  2147 ;; This function calls:
  2148 ;;		i2_LCDWriteNibble
  2149 ;; This function is called by:
  2150 ;;		_LCDGoto
  2151 ;; This function uses a non-reentrant model
  2152 ;;
  2153                           
  2154                           	psect	text15
  2155  001540                     __ptext15:
  2156                           	opt stack 0
  2157  001540                     i2_LCDPutCmd:
  2158                           	opt stack 24
  2159                           
  2160                           ;incstack = 0
  2161                           ;i2LCDPutCmd@ch stored from wreg
  2162  001540  6E04               	movwf	i2LCDPutCmd@ch,c
  2163                           
  2164                           ;lcd.c: 120: _delay((unsigned long)((5)*(8e6/4000.0)));
  2165  001542  0E0D               	movlw	13
  2166  001544  6E03               	movwf	??i2_LCDPutCmd& (0+255),c
  2167  001546  0EFC               	movlw	252
  2168  001548                     i2u83_47:
  2169  001548  2EE8               	decfsz	wreg,f,c
  2170  00154A  D7FE               	goto	i2u83_47
  2171  00154C  2E03               	decfsz	??i2_LCDPutCmd& (0+255),f,c
  2172  00154E  D7FC               	goto	i2u83_47
  2173                           
  2174                           ;lcd.c: 123: LCDWriteNibble(ch,0);
  2175  001550  0E00               	movlw	0
  2176  001552  6E01               	movwf	i2LCDWriteNibble@rs,c
  2177  001554  5004               	movf	i2LCDPutCmd@ch,w,c
  2178  001556  ECEA  F00A         	call	i2_LCDWriteNibble
  2179                           
  2180                           ;lcd.c: 126: ch = (ch << 4);
  2181  00155A  3804               	swapf	i2LCDPutCmd@ch,w,c
  2182  00155C  0BF0               	andlw	240
  2183  00155E  6E04               	movwf	i2LCDPutCmd@ch,c
  2184                           
  2185                           ;lcd.c: 128: _delay((unsigned long)((1)*(8e6/4000.0)));
  2186  001560  0E03               	movlw	3
  2187  001562  6E03               	movwf	??i2_LCDPutCmd& (0+255),c
  2188  001564  0E98               	movlw	152
  2189  001566                     i2u84_47:
  2190  001566  2EE8               	decfsz	wreg,f,c
  2191  001568  D7FE               	goto	i2u84_47
  2192  00156A  2E03               	decfsz	??i2_LCDPutCmd& (0+255),f,c
  2193  00156C  D7FC               	goto	i2u84_47
  2194                           
  2195                           ;lcd.c: 131: LCDWriteNibble(ch,0);
  2196  00156E  0E00               	movlw	0
  2197  001570  6E01               	movwf	i2LCDWriteNibble@rs,c
  2198  001572  5004               	movf	i2LCDPutCmd@ch,w,c
  2199  001574  ECEA  F00A         	call	i2_LCDWriteNibble
  2200  001578  0012               	return		;funcret
  2201  00157A                     __end_ofi2_LCDPutCmd:
  2202                           	opt stack 0
  2203                           pclatu	equ	0xFFB
  2204                           pclath	equ	0xFFA
  2205                           tblptru	equ	0xFF8
  2206                           tblptrh	equ	0xFF7
  2207                           tblptrl	equ	0xFF6
  2208                           tablat	equ	0xFF5
  2209                           prodh	equ	0xFF4
  2210                           prodl	equ	0xFF3
  2211                           intcon	equ	0xFF2
  2212                           indf0	equ	0xFEF
  2213                           postinc0	equ	0xFEE
  2214                           fsr0h	equ	0xFEA
  2215                           fsr0l	equ	0xFE9
  2216                           wreg	equ	0xFE8
  2217                           fsr1h	equ	0xFE2
  2218                           fsr1l	equ	0xFE1
  2219                           indf2	equ	0xFDF
  2220                           postinc2	equ	0xFDE
  2221                           postdec2	equ	0xFDD
  2222                           fsr2h	equ	0xFDA
  2223                           fsr2l	equ	0xFD9
  2224                           status	equ	0xFD8
  2225                           
  2226 ;; *************** function i2_LCDWriteNibble *****************
  2227 ;; Defined at:
  2228 ;;		line 76 in file "lcd.c"
  2229 ;; Parameters:    Size  Location     Type
  2230 ;;  ch              1    wreg     unsigned char 
  2231 ;;  rs              1    0[COMRAM] unsigned char 
  2232 ;; Auto vars:     Size  Location     Type
  2233 ;;  ch              1    1[COMRAM] unsigned char 
  2234 ;; Return value:  Size  Location     Type
  2235 ;;		None               void
  2236 ;; Registers used:
  2237 ;;		wreg, status,2, status,0
  2238 ;; Tracked objects:
  2239 ;;		On entry : 0/0
  2240 ;;		On exit  : 0/0
  2241 ;;		Unchanged: 0/0
  2242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2243 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2244 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2246 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2247 ;;Total ram usage:        2 bytes
  2248 ;; Hardware stack levels used:    1
  2249 ;; This function calls:
  2250 ;;		Nothing
  2251 ;; This function is called by:
  2252 ;;		i2_LCDPutCmd
  2253 ;; This function uses a non-reentrant model
  2254 ;;
  2255                           
  2256                           	psect	text16
  2257  0015D4                     __ptext16:
  2258                           	opt stack 0
  2259  0015D4                     i2_LCDWriteNibble:
  2260                           	opt stack 24
  2261                           
  2262                           ;incstack = 0
  2263                           ;i2LCDWriteNibble@ch stored from wreg
  2264  0015D4  6E02               	movwf	i2LCDWriteNibble@ch,c
  2265                           
  2266                           ;lcd.c: 79: ch = (ch >> 4);
  2267  0015D6  3802               	swapf	i2LCDWriteNibble@ch,w,c
  2268  0015D8  0B0F               	andlw	15
  2269  0015DA  6E02               	movwf	i2LCDWriteNibble@ch,c
  2270                           
  2271                           ;lcd.c: 82: ch = (ch & 0x0F);
  2272  0015DC  5002               	movf	i2LCDWriteNibble@ch,w,c
  2273  0015DE  0B0F               	andlw	15
  2274  0015E0  6E02               	movwf	i2LCDWriteNibble@ch,c
  2275                           
  2276                           ;lcd.c: 85: PORTD = (PORTD & 0xF0);
  2277  0015E2  5083               	movf	3971,w,c	;volatile
  2278  0015E4  0BF0               	andlw	240
  2279  0015E6  6E83               	movwf	3971,c	;volatile
  2280                           
  2281                           ;lcd.c: 88: PORTD = (PORTD | ch);
  2282  0015E8  5083               	movf	3971,w,c	;volatile
  2283  0015EA  1002               	iorwf	i2LCDWriteNibble@ch,w,c
  2284  0015EC  6E83               	movwf	3971,c	;volatile
  2285                           
  2286                           ;lcd.c: 91: PORTDbits.RD4 = rs;
  2287  0015EE  B001               	btfsc	i2LCDWriteNibble@rs,0,c
  2288  0015F0  D002               	bra	i2u36_45
  2289  0015F2  9883               	bcf	3971,4,c	;volatile
  2290  0015F4  D001               	bra	i2u36_46
  2291  0015F6                     i2u36_45:
  2292  0015F6  8883               	bsf	3971,4,c	;volatile
  2293  0015F8                     i2u36_46:
  2294                           
  2295                           ;lcd.c: 94: PORTDbits.RD5 = 0;
  2296  0015F8  9A83               	bcf	3971,5,c	;volatile
  2297                           
  2298                           ;lcd.c: 97: PORTDbits.RD6 = 1;
  2299  0015FA  8C83               	bsf	3971,6,c	;volatile
  2300                           
  2301                           ;lcd.c: 100: PORTDbits.RD6 = 0;
  2302  0015FC  9C83               	bcf	3971,6,c	;volatile
  2303  0015FE  0012               	return		;funcret
  2304  001600                     __end_ofi2_LCDWriteNibble:
  2305                           	opt stack 0
  2306                           pclatu	equ	0xFFB
  2307                           pclath	equ	0xFFA
  2308                           tblptru	equ	0xFF8
  2309                           tblptrh	equ	0xFF7
  2310                           tblptrl	equ	0xFF6
  2311                           tablat	equ	0xFF5
  2312                           prodh	equ	0xFF4
  2313                           prodl	equ	0xFF3
  2314                           intcon	equ	0xFF2
  2315                           indf0	equ	0xFEF
  2316                           postinc0	equ	0xFEE
  2317                           fsr0h	equ	0xFEA
  2318                           fsr0l	equ	0xFE9
  2319                           wreg	equ	0xFE8
  2320                           fsr1h	equ	0xFE2
  2321                           fsr1l	equ	0xFE1
  2322                           indf2	equ	0xFDF
  2323                           postinc2	equ	0xFDE
  2324                           postdec2	equ	0xFDD
  2325                           fsr2h	equ	0xFDA
  2326                           fsr2l	equ	0xFD9
  2327                           status	equ	0xFD8
  2328                           pclatu	equ	0xFFB
  2329                           pclath	equ	0xFFA
  2330                           tblptru	equ	0xFF8
  2331                           tblptrh	equ	0xFF7
  2332                           tblptrl	equ	0xFF6
  2333                           tablat	equ	0xFF5
  2334                           prodh	equ	0xFF4
  2335                           prodl	equ	0xFF3
  2336                           intcon	equ	0xFF2
  2337                           indf0	equ	0xFEF
  2338                           postinc0	equ	0xFEE
  2339                           fsr0h	equ	0xFEA
  2340                           fsr0l	equ	0xFE9
  2341                           wreg	equ	0xFE8
  2342                           fsr1h	equ	0xFE2
  2343                           fsr1l	equ	0xFE1
  2344                           indf2	equ	0xFDF
  2345                           postinc2	equ	0xFDE
  2346                           postdec2	equ	0xFDD
  2347                           fsr2h	equ	0xFDA
  2348                           fsr2l	equ	0xFD9
  2349                           status	equ	0xFD8
  2350                           
  2351                           	psect	rparam
  2352  0000                     pclatu	equ	0xFFB
  2353                           pclath	equ	0xFFA
  2354                           tblptru	equ	0xFF8
  2355                           tblptrh	equ	0xFF7
  2356                           tblptrl	equ	0xFF6
  2357                           tablat	equ	0xFF5
  2358                           prodh	equ	0xFF4
  2359                           prodl	equ	0xFF3
  2360                           intcon	equ	0xFF2
  2361                           indf0	equ	0xFEF
  2362                           postinc0	equ	0xFEE
  2363                           fsr0h	equ	0xFEA
  2364                           fsr0l	equ	0xFE9
  2365                           wreg	equ	0xFE8
  2366                           fsr1h	equ	0xFE2
  2367                           fsr1l	equ	0xFE1
  2368                           indf2	equ	0xFDF
  2369                           postinc2	equ	0xFDE
  2370                           postdec2	equ	0xFDD
  2371                           fsr2h	equ	0xFDA
  2372                           fsr2l	equ	0xFD9
  2373                           status	equ	0xFD8


Data Sizes:
    Strings     36
    Constant    10
    Data        0
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     45      55
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_1(CODE[8]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 10
		 -> txt(COMRAM[10]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    SEND@x	PTR unsigned char  size(2) Largest target is 10
		 -> STR_5(CODE[7]), STR_4(CODE[7]), STR_3(CODE[7]), STR_2(CODE[7]), 
		 -> txt(COMRAM[10]), 


Critical Paths under _main in COMRAM

    _main->_Buttons
    _LCD_Initialize->_LCDPutCmd
    _LCDPutCmd->_LCDWriteNibble
    _Buttons->_SEND

Critical Paths under _adc in COMRAM

    _adc->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _LCDGoto->i2_LCDPutCmd
    i2_LCDPutCmd->i2_LCDWriteNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _adc in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _adc in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _adc in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _adc in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _adc in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _adc in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _adc in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _adc in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _adc in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _adc in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _adc in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _adc in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _adc in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _adc in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _adc in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _adc in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     823
                             _AdcIni
                            _BRG9600
                            _Buttons
                         _CompareIni
                     _LCD_Initialize
                              _Ports
 ---------------------------------------------------------------------------------
 (1) _Ports                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_Initialize                                       1     1      0     413
                                             43 COMRAM     1     1      0
                          _LCDPutCmd
 ---------------------------------------------------------------------------------
 (2) _LCDPutCmd                                            2     2      0     413
                                             41 COMRAM     2     2      0
                     _LCDWriteNibble
 ---------------------------------------------------------------------------------
 (3) _LCDWriteNibble                                       2     1      1     346
                                             39 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _CompareIni                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Buttons                                              1     1      0     410
                                             44 COMRAM     1     1      0
                               _SEND
 ---------------------------------------------------------------------------------
 (2) _SEND                                                 5     3      2     410
                                             39 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _BRG9600                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _AdcIni                                               2     2      0       0
                                             39 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _adc                                                 14    14      0    1499
                                             25 COMRAM    14    14      0
                            _LCDGoto
                            _sprintf
 ---------------------------------------------------------------------------------
 (5) _sprintf                                             22    16      6    1092
                                             12 COMRAM    13     7      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) _LCDGoto                                              6     5      1     407
                                              4 COMRAM     6     5      1
                        i2_LCDPutCmd
 ---------------------------------------------------------------------------------
 (6) i2_LCDPutCmd                                          2     2      0     209
                                              2 COMRAM     2     2      0
                   i2_LCDWriteNibble
 ---------------------------------------------------------------------------------
 (7) i2_LCDWriteNibble                                     2     1      1     142
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcIni
   _BRG9600
   _Buttons
     _SEND
   _CompareIni
   _LCD_Initialize
     _LCDPutCmd
       _LCDWriteNibble
   _Ports

 _adc (ROOT)
   _LCDGoto
     i2_LCDPutCmd
       i2_LCDWriteNibble
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     2D      37       1       43.3%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      37      34        0.0%
DATA                 0      0      37       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sat Sep 28 13:28:55 2019

           _LCD_Initialize 14CC                __CFG_BORV$3 000000               __CFG_CP0$OFF 000000  
             __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000  
              __CFG_OSC$HS 000000                        l162 11D8                        l147 1360  
                      l163 11B6                        l172 1248                        l173 1226  
                      l181 1280                        l157 11A0                        l158 117E  
                      l167 1210                        l168 11EE                        l178 125E  
                      _GIE 007F97               __CFG_CPB$OFF 000000                        u370 135C  
             __CFG_CPD$OFF 000000                        u355 15CA                        u356 15CC  
                      u390 139E                        u377 1352                        u707 150E  
                      u397 1394                        u717 152C                        u807 1252  
                      u727 1172                        u817 1268                        u737 1188  
                      u747 11AA                        u757 11C0                        u767 11E2  
                      u777 11F8                        u697 14DC                        u787 121A  
                      u797 1230                        _adc 0008           i2_LCDWriteNibble 15D4  
                      _txt 002E            __end_of_BRG9600 1646         i2LCDWriteNibble@ch 0002  
                      wreg 000FE8         i2LCDWriteNibble@rs 0001               __CFG_LVP$OFF 000000  
          __end_of_LCDGoto 1490               __CFG_WDT$OFF 000000                       ?_adc 0001  
                     l1114 1326                       l1118 1368                       l1298 1616  
                     _ADIE 007CEE                       _ADIF 007CF6                       _ADFM 007E07  
                     _ADON 007E10                       STR_1 100B                       STR_2 1028  
                     STR_3 1021                       STR_4 1013                       STR_5 101A  
                     _BRGH 007D62                       _LATB 000F8A                       _PEIE 007F96  
                     i2l34 148E                       i2l73 12B8                       i2l75 12E6  
                     _SEND 1320                       _TMR1 000FCE                       _SPEN 007D5F  
                     _TRMT 007D61                       _TXEN 007D65                       _SYNC 007D64  
                     _main 1600                       fsr0h 000FEA                       fsr1h 000FE2  
                     indf0 000FEF                       fsr0l 000FE9                       fsr2h 000FDA  
                     fsr1l 000FE1                       indf2 000FDF                       fsr2l 000FD9  
                     pclat 000FFA         __size_of_LCDPutCmd 003A                       prodh 000FF4  
                     prodl 000FF3                       start 0018              __CFG_IESO$OFF 000000  
   __end_of_LCD_Initialize 1506              __CFG_MCLRE$ON 000000               ___param_bank 000010  
          __end_of_Buttons 1282                      ??_adc 001A                      ?_SEND 0028  
              LCDPutCmd@ch 002B                      SEND@i 002C                      SEND@x 0028  
                    ?_main 0001                      _ADRES 000FC3                      _CCPR1 000FBE  
                    _BRG16 007DC3            __end_of___lwdiv 1402            __end_of___lwmod 144E  
                    i2l212 1166                      i2l206 10D6                      i2l733 13F8  
                    i2l743 1444                      _SPBRG 000FAF                      _PORTD 000F83  
                    _TRISB 000F93                      _TRISD 000F95                      _TXREG 000FAD  
            __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000  
            __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000             __CFG_EBTR0$OFF 000000  
           __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000  
           __CFG_EBTR3$OFF 000000                 _CompareIni 157A                      _Ports 1646  
            __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000  
           __CFG_EBTRB$OFF 000000            __end_of_dpowers 100B               ?i2_LCDPutCmd 0001  
                    tablat 000FF5                      status 000FD8            __end_of_sprintf 1168  
             __end_of_SEND 13A6            ?_LCD_Initialize 0001            __initialization 1620  
             __end_of_main 1620                     ??_SEND 002A                  ??_BRG9600 0028  
                   ??_main 002E              __activetblptr 000002                  ??_LCDGoto 0006  
        __end_of_LCDPutCmd 1540                     ?_Ports 0001                     _CCP1IE 007CEA  
                   _CCP1IF 007CF2                     i2l1200 1468                     i2l1202 147A  
                   i2l1130 13CE                     i2l1126 13BC                     i2l1150 1422  
                   i2l1128 13C6                     i2l1240 103A                     i2l1138 13EC  
                   i2l1154 1438                     i2l1146 1410                     _T1SYNC 007E6A  
                   i2l1148 141A                     i2l1260 10A2                     i2l1252 1064  
                   i2l1254 1086                     i2l1246 1054                     i2l1272 10DC  
                   i2l1264 10AE                     i2l1248 105E                     i2l1280 113C  
                   i2l1282 1158                     i2l1196 145E                     i2l1268 10D2  
                   i2l1278 1130                     _TMR1CS 007E69                     _TMR1ON 007E68  
                   _AdcIni 1490                     _TRISC2 007CA2             _LCDWriteNibble 15A8  
                ??_Buttons 002D             __CFG_XINST$OFF 000000             __CFG_STVREN$ON 000000  
                ??___lwdiv 0005                  ??___lwmod 000C                     clear_0 1626  
             __mediumconst 0000                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8                ?_CompareIni 0001                  ??_sprintf 0013  
   __end_of_LCDWriteNibble 15D4                 __accesstop 0080    __end_of__initialization 162C  
          __CFG_PBADEN$OFF 000000              ___rparam_used 000001                  LCDGoto@ln 0005  
 __end_ofi2_LCDWriteNibble 1600             __pcstackCOMRAM 0001              __end_of_Ports 164E  
                  ??_Ports 0028       __size_ofi2_LCDPutCmd 003A            ?_LCDWriteNibble 0028  
                  ?_AdcIni 0001        __size_of_CompareIni 002E                    _BRG9600 1636  
                  _LCDGoto 144E                    i2u36_45 15F6                    i2u36_46 15F8  
                  i2u82_47 1486                    i2u83_47 1548                    i2u84_47 1566  
         ??_LCD_Initialize 002C            __size_of_AdcIni 003C                    _Buttons 1168  
                  __Hparam 0000                    __Lparam 0000                    ___lwdiv 13A6  
                  ___lwmod 1402               __psmallconst 1000                    __pcinit 1620  
                  __ramtop 1000                    __ptext0 1600                    __ptext1 1646  
                  __ptext2 14CC                    __ptext3 1506                    __ptext4 15A8  
                  __ptext5 157A                    __ptext6 1168                    __ptext7 1320  
                  __ptext8 1636                    __ptext9 1490                  _T1CONbits 000FCD  
                  _dpowers 1001               __size_of_adc 1318                  _LCDPutCmd 1506  
                  _sprintf 1030             __pintcode_body 1282       end_of_initialization 162C  
            __Lmediumconst 0000                    int_func 1282                    postdec2 000FDD  
                  postinc0 000FEE                    postinc2 000FDE                  _PORTBbits 000F81  
                _PORTDbits 000F83               ??_CompareIni 0028                 ?_LCDPutCmd 0001  
              _CCP1CONbits 000FBD                 LCDGoto@pos 000A             __end_of_AdcIni 14CC  
        ?i2_LCDWriteNibble 0001         ??i2_LCDWriteNibble 0002         __end_of_CompareIni 15A8  
      start_initialization 1620                __end_of_adc 1320           ??_LCDWriteNibble 0029  
                 ??_AdcIni 0028           __CFG_LPT1OSC$OFF 000000                   ?_BRG9600 0001  
                 ?_LCDGoto 0005                __pbssCOMRAM 002E              ??i2_LCDPutCmd 0003  
              ??_LCDPutCmd 002A                sprintf@flag 0013                sprintf@prec 0018  
                 ?_Buttons 0001           ___lwdiv@dividend 0001          __CFG_CCP2MX$PORTC 000000  
                __pintcode 0008                   ?___lwdiv 0001                   ?___lwmod 0008  
         LCDWriteNibble@ch 0029           LCDWriteNibble@rs 0028              i2LCDPutCmd@ch 0004  
              __smallconst 1000             __size_of_Ports 0008           ___lwdiv@quotient 0005  
                 ?_sprintf 000D        __end_ofi2_LCDPutCmd 157A                _LCDGoto$116 0008  
         __CFG_WDTPS$32768 000000                 AdcIni@duty 0028                 _ADCON0bits 000FC2  
         __size_of_BRG9600 0010                 _ADCON1bits 000FC1                 _ADCON2bits 000FC0  
         __size_of_LCDGoto 0042                   __Hrparam 0000           __size_of_Buttons 011A  
                 __Lrparam 0000         __CFG_BOREN$SBORDIS 000000    __size_of_LCD_Initialize 003A  
         __size_of___lwdiv 005C           __size_of___lwmod 004C                 sprintf@val 0016  
__size_ofi2_LCDWriteNibble 002C            ___lwdiv@divisor 0003            ___lwdiv@counter 0007  
                 __ptext11 1030                   __ptext12 1402                   __ptext13 13A6  
                 __ptext14 144E                   __ptext15 1540                   __ptext16 15D4  
              i2_LCDPutCmd 1540           __size_of_sprintf 0138              __size_of_SEND 0086  
            __size_of_main 0020                   intlevel2 0000                  sprintf@ap 0014  
                sprintf@sp 000D           ___lwmod@dividend 0008                   sprintf@c 0019  
                 sprintf@f 000F            ___lwmod@divisor 000A            ___lwmod@counter 000C  
  __size_of_LCDWriteNibble 002C  
